{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './featuredInfo.css';\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeaturedInfo = ({\n  keyword\n}) => {\n  _s();\n  const [dailyData, setDailyData] = useState(null);\n  const [monthlyData, setMonthlyData] = useState(null);\n  const [genderData, setGenderData] = useState(\"\");\n  const [agesData, setAgesData] = useState([]);\n  const [error, setError] = useState(null);\n\n  // 현재 날짜 기준 요청 데이터 생성\n  const calculateDateRange = timeUnit => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const day = String(now.getDate()).padStart(2, \"0\");\n    const startDate = timeUnit === \"month\" ? `${year}-01-01` : `${year}-${month}-01`;\n    const endDate = `${year}-${month}-${day}`;\n    return {\n      startDate,\n      endDate\n    };\n  };\n  const fetchTrendData = async (timeUnit, type = \"gender\", value = \"\") => {\n    if (!keyword || keyword.trim() === \"\") {\n      console.error(\"유효하지 않은 검색어:\", keyword);\n      setError(\"검색어를 입력하세요.\");\n      return null; // 빈 배열 반환\n    }\n    const {\n      startDate,\n      endDate\n    } = calculateDateRange(timeUnit);\n    const requestData = {\n      startDate,\n      endDate,\n      timeUnit,\n      keywordGroups: [{\n        groupName: \"trend\",\n        keywords: [keyword]\n      }]\n    };\n\n    // 성별/연령대별 데이터를 요청하도록 requestData 확장\n    if (type === \"gender\") {\n      requestData.keywordGroups[0].gender = value; // \"f\" 또는 \"m\"\n    } else if (type === \"age\") {\n      requestData.keywordGroups[0].ages = [value]; // \"1\" ~ \"11\"\n    }\n\n    // console.log(\"Request data:\", requestData);\n\n    try {\n      const response = await axios.post(\"/api/trend\", requestData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.data || response.data.results) {\n        return response.data.results;\n      } else {\n        console.error(\"API 응답 결과가 없습니다: \", response.data);\n        return [];\n      }\n    } catch (err) {\n      console.error(\"데이터 요청 실패:\", err);\n      return [];\n    }\n  };\n\n  // // 성별 및 연령대 데이터 그룹화 함수\n  // const groupData = (data) => {\n  //     if (!data) {\n  //         console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n  //         return {\n  //             genderData: { m: 0, f: 0 }, \n  //             agesData: {  \n  //                 \"10대\": 0,\n  //                 \"20대\": 0,\n  //                 \"30대\": 0,\n  //                 \"40대\": 0,\n  //                 \"50대\": 0,\n  //                 \"60대 이상\": 0,\n  //             }\n  //         }\n  //     }\n\n  //     const genderData = { m: 0, f: 0 };\n  //     const agesData = {\n  //             \"10대\": 0,\n  //             \"20대\": 0,\n  //             \"30대\": 0,\n  //             \"40대\": 0,\n  //             \"50대\": 0,\n  //             \"60대 이상\": 0,\n  //     };\n\n  //     data.forEach((entry) => {\n  //         if (entry.gender === \"m\") {\n  //             genderData.m += entry.value;\n  //         } else if (entry.gender === \"f\") {\n  //             genderData.f += entry.value;\n  //         }\n\n  //         (entry.ages || []).forEach((age) => {\n  //             if ([\"1\", \"2\"].includes(age)) agesData[\"10대\"] += entry.value;\n  //             else if ([\"3\", \"4\"].includes(age)) agesData[\"20대\"] += entry.value;\n  //             else if ([\"5\", \"6\"].includes(age)) agesData[\"30대\"] += entry.value;\n  //             else if ([\"7\", \"8\"].includes(age)) agesData[\"40대\"] += entry.value;\n  //             else if ([\"9\", \"10\"].includes(age)) agesData[\"50대\"] += entry.value;\n  //             else if ([\"11\"].includes(age)) agesData[\"60대 이상\"] += entry.value;\n  //         });\n  //     });\n\n  // 데이터 요청 및 처리\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        var _maleResponse$, _femaleResponse$;\n        // 일별 데이터 요청\n        const dailyResponse = await fetchTrendData(\"date\");\n        if (dailyResponse) {\n          console.log(\"일별 데이터 업데이트:\", dailyResponse);\n          setDailyData(dailyResponse);\n        }\n\n        // 월별 데이터 요청\n        const monthlyResponse = await fetchTrendData(\"month\");\n        if (monthlyResponse) {\n          console.log(\"월별 데이터 업데이트:\", monthlyResponse);\n          setMonthlyData(monthlyResponse);\n        }\n\n        // 성별 데이터 요청\n        const maleResponse = await fetchTrendData(\"month\", \"gender\", \"m\");\n        const femaleResponse = await fetchTrendData(\"month\", \"gender\", \"f\");\n        console.log(\"남성 데이터 업데이트:\", maleResponse);\n        console.log(\"여성 데이터 업데이트:\", femaleResponse);\n        setGenderData({\n          m: ((_maleResponse$ = maleResponse[0]) === null || _maleResponse$ === void 0 ? void 0 : _maleResponse$.data) || [],\n          f: ((_femaleResponse$ = femaleResponse[0]) === null || _femaleResponse$ === void 0 ? void 0 : _femaleResponse$.data) || []\n        });\n\n        // 연령별 데이터 요청\n        const ageRanges = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"];\n        const ageResponse = {};\n        for (const age of ageRanges) {\n          var _response$;\n          const response = await fetchTrendData(\"month\", \"age\", age);\n          ageResponse[age] = ((_response$ = response[0]) === null || _response$ === void 0 ? void 0 : _response$.data) || [];\n        }\n        console.log(\"연령별 데이터 업데이트:\", ageResponse);\n        setAgesData(ageResponse);\n\n        // // 데이터 전처리\n        // const processedMonthlyData = preprocessMonthlyResponse(monthlyResponse);\n\n        // // 성별 및 연령 데이터 추출\n        // const groupedData = groupData(processedMonthlyData);\n        // setGenderData(groupedData.genderData);\n        // setAgesData(groupedData.agesData);\n\n        // console.log(\"Grouped Data:\", groupedData);\n        // console.log(\"Gender Data:\", groupedData.genderData);\n        // console.log(\"Ages Data:\", groupedData.agesData);\n      } catch (err) {\n        console.error(\"데이터 요청 실패: \", err);\n        setError(\"데이터 요청에 실패했습니다.\");\n      }\n    };\n    fetchData();\n  }, [keyword]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 16\n    }, this);\n  }\n  if (!dailyData || !monthlyData || !genderData || !agesData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uB85C\\uB4DC \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"featured\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"featuredItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"featuredTitle\",\n          children: \"\\uC77C\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DailyChart, {\n          data: dailyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"featuredItem\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"featuredTitle\",\n          children: \"\\uC131\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"featuredItem\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"featuredTitle\",\n          children: \"\\uC5F0\\uB839\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"lineChart\",\n        children: \"\\uC6D4\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MonthlyChart, {\n        cata: monthlyData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n};\n_s(FeaturedInfo, \"nYSQFVPKW/nCcUtQlMVBUM5w6qU=\");\n_c = FeaturedInfo;\nexport default FeaturedInfo;\nvar _c;\n$RefreshReg$(_c, \"FeaturedInfo\");","map":{"version":3,"names":["React","useEffect","useState","DailyChart","MonthlyChart","axios","jsxDEV","_jsxDEV","FeaturedInfo","keyword","_s","dailyData","setDailyData","monthlyData","setMonthlyData","genderData","setGenderData","agesData","setAgesData","error","setError","calculateDateRange","timeUnit","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","startDate","endDate","fetchTrendData","type","value","trim","console","requestData","keywordGroups","groupName","keywords","gender","ages","response","post","headers","data","results","err","fetchData","_maleResponse$","_femaleResponse$","dailyResponse","log","monthlyResponse","maleResponse","femaleResponse","m","f","ageRanges","ageResponse","age","_response$","children","fileName","_jsxFileName","lineNumber","columnNumber","className","cata","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './featuredInfo.css'\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\n\n const FeaturedInfo = ({ keyword }) => {\n    const [dailyData, setDailyData] = useState(null);\n    const [monthlyData, setMonthlyData] = useState(null);\n    const [genderData, setGenderData] = useState(\"\");\n    const [agesData, setAgesData] = useState([]);\n    const [error, setError] = useState(null);\n\n    // 현재 날짜 기준 요청 데이터 생성\n    const calculateDateRange = (timeUnit) => {\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, \"0\");\n        const day = String(now.getDate()).padStart(2, \"0\");\n        const startDate = \n            timeUnit === \"month\" \n                ? `${year}-01-01` \n                : `${year}-${month}-01`;\n        const endDate = `${year}-${month}-${day}`;\n\n        return { startDate, endDate };\n    };\n        \n    const fetchTrendData = async (timeUnit, type = \"gender\", value = \"\") => {\n        if (!keyword || keyword.trim() === \"\") {\n            console.error(\"유효하지 않은 검색어:\", keyword);\n            setError(\"검색어를 입력하세요.\");\n            return null; // 빈 배열 반환\n        }\n\n        const { startDate, endDate } = calculateDateRange(timeUnit);\n        const requestData = {\n            startDate,\n            endDate,\n            timeUnit,\n            keywordGroups: [{ groupName: \"trend\", keywords: [keyword] }],\n        };\n\n        // 성별/연령대별 데이터를 요청하도록 requestData 확장\n        if (type === \"gender\") {\n            requestData.keywordGroups[0].gender = value; // \"f\" 또는 \"m\"\n        } else if (type === \"age\") {\n            requestData.keywordGroups[0].ages = [value]; // \"1\" ~ \"11\"\n        }\n\n        // console.log(\"Request data:\", requestData);\n\n        try {\n            const response = await axios.post(\"/api/trend\", requestData, {\n                headers: { \"Content-Type\": \"application/json\" }\n            });\n\n            if (response.data || response.data.results) {\n                return response.data.results;\n            } else {\n                console.error(\"API 응답 결과가 없습니다: \", response.data);\n                return [];\n            }\n        } catch (err) {\n            console.error(\"데이터 요청 실패:\", err);\n            return [];\n        }\n    };\n\n    // // 성별 및 연령대 데이터 그룹화 함수\n    // const groupData = (data) => {\n    //     if (!data) {\n    //         console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n    //         return {\n    //             genderData: { m: 0, f: 0 }, \n    //             agesData: {  \n    //                 \"10대\": 0,\n    //                 \"20대\": 0,\n    //                 \"30대\": 0,\n    //                 \"40대\": 0,\n    //                 \"50대\": 0,\n    //                 \"60대 이상\": 0,\n    //             }\n    //         }\n    //     }\n\n    //     const genderData = { m: 0, f: 0 };\n    //     const agesData = {\n    //             \"10대\": 0,\n    //             \"20대\": 0,\n    //             \"30대\": 0,\n    //             \"40대\": 0,\n    //             \"50대\": 0,\n    //             \"60대 이상\": 0,\n    //     };\n    \n    //     data.forEach((entry) => {\n    //         if (entry.gender === \"m\") {\n    //             genderData.m += entry.value;\n    //         } else if (entry.gender === \"f\") {\n    //             genderData.f += entry.value;\n    //         }\n\n    //         (entry.ages || []).forEach((age) => {\n    //             if ([\"1\", \"2\"].includes(age)) agesData[\"10대\"] += entry.value;\n    //             else if ([\"3\", \"4\"].includes(age)) agesData[\"20대\"] += entry.value;\n    //             else if ([\"5\", \"6\"].includes(age)) agesData[\"30대\"] += entry.value;\n    //             else if ([\"7\", \"8\"].includes(age)) agesData[\"40대\"] += entry.value;\n    //             else if ([\"9\", \"10\"].includes(age)) agesData[\"50대\"] += entry.value;\n    //             else if ([\"11\"].includes(age)) agesData[\"60대 이상\"] += entry.value;\n    //         });\n    //     });\n\n  \n  \n    // 데이터 요청 및 처리\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // 일별 데이터 요청\n                const dailyResponse = await fetchTrendData(\"date\");\n                if (dailyResponse) {\n                    console.log(\"일별 데이터 업데이트:\", dailyResponse);\n                    setDailyData(dailyResponse);\n                } \n\n                // 월별 데이터 요청\n                const monthlyResponse = await fetchTrendData(\"month\");\n                if (monthlyResponse) {\n                    console.log(\"월별 데이터 업데이트:\", monthlyResponse);\n                    setMonthlyData(monthlyResponse);\n                }\n\n                // 성별 데이터 요청\n                const maleResponse = await fetchTrendData(\"month\", \"gender\", \"m\");\n                const femaleResponse = await fetchTrendData(\"month\", \"gender\", \"f\");\n\n                console.log(\"남성 데이터 업데이트:\", maleResponse);\n                console.log(\"여성 데이터 업데이트:\", femaleResponse);\n\n                setGenderData({\n                    m: maleResponse[0]?.data || [],\n                    f: femaleResponse[0]?.data || [],\n                });\n\n                // 연령별 데이터 요청\n                const ageRanges = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"];\n                const ageResponse = {};\n\n                for (const age of ageRanges) {\n                    const response = await fetchTrendData(\"month\", \"age\", age);\n                    ageResponse[age] = response[0]?.data || [];\n                }\n                console.log(\"연령별 데이터 업데이트:\", ageResponse);\n\n                setAgesData(ageResponse);\n\n                    // // 데이터 전처리\n                    // const processedMonthlyData = preprocessMonthlyResponse(monthlyResponse);\n\n                    // // 성별 및 연령 데이터 추출\n                    // const groupedData = groupData(processedMonthlyData);\n                    // setGenderData(groupedData.genderData);\n                    // setAgesData(groupedData.agesData);\n\n                    // console.log(\"Grouped Data:\", groupedData);\n                    // console.log(\"Gender Data:\", groupedData.genderData);\n                    // console.log(\"Ages Data:\", groupedData.agesData);\n            } catch (err) {\n                console.error(\"데이터 요청 실패: \", err);\n                setError(\"데이터 요청에 실패했습니다.\");\n            }\n        };\n      \n        fetchData();\n    }, [keyword]);\n\n    if (error) {\n        return <p>{error}</p>;\n    }\n\n    if (!dailyData || !monthlyData || !genderData || !agesData ) {\n        return <p>데이터를 로드 중입니다...</p>;\n    }\n    \n    return (\n        <div className=\"featured\">\n            <div className=\"top\">\n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">일별 검색량</span>\n                        <DailyChart data={dailyData} />\n                </div>\n        \n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">성별 검색량</span>\n                        {/* <GenderChart data={genderData} /> */}\n                </div>\n        \n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">연령별 검색량</span>\n                        {/* <AgesChart data={agesData} /> */}\n                </div>\n            </div>\n            <div className=\"middle\">\n                <h3 className=\"lineChart\">월별 검색량</h3>\n                <MonthlyChart cata={monthlyData} />\n            </div>\n        </div>\n    );\n\n};\n        \n\nexport default FeaturedInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}