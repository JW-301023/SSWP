{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './featuredInfo.css';\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeaturedInfo = ({\n  keyword\n}) => {\n  _s();\n  const [dailyData, setDailyData] = useState(null);\n  const [monthlyData, setMonthlyData] = useState(null);\n  // const [genderData, setGenderData] = useState(null);\n  // const [agesData, setAgesData] = useState([]);\n  const [error, setError] = useState(null);\n\n  // 현재 날짜 기준 요청 데이터 생성\n  const calculateDateRange = timeUnit => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const day = String(now.getDate()).padStart(2, \"0\");\n    if (timeUnit === \"month\") {\n      // 월별 데이터: 해당 연도의 1월 1일부터 현재 날짜까지\n      const startDate = `${year}-01-01`; // 1월 1일\n      const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n      return {\n        startDate,\n        endDate\n      };\n    } else if (timeUnit === \"date\") {\n      // 일별 데이터: 해당 월의 1일부터 현재 날짜까지\n      const startDate = `${year}-${month}-01`; // 이번 달의 1일\n      const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n      return {\n        startDate,\n        endDate\n      };\n    }\n\n    // 기본값: 전체 연도 기준\n    const startDate = `${year}-01-01`;\n    const endDate = `${year}-${month}-${day}`;\n    return {\n      startDate,\n      endDate\n    };\n  };\n  const fetchTrendData = async (timeUnit, type, value) => {\n    if (!keyword || keyword.trim() === \"\") {\n      console.error(\"유효하지 않은 검색어:\", keyword);\n      setError(\"검색어를 입력하세요.\");\n      return null; // 빈 배열 반환\n    }\n    const {\n      startDate,\n      endDate\n    } = calculateDateRange(timeUnit);\n    const requestData = {\n      startDate,\n      endDate,\n      timeUnit,\n      keywordGroups: [{\n        groupName: \"trend\",\n        keywords: [keyword]\n      }]\n    };\n\n    // // 성별/연령대별 데이터를 요청하도록 requestData 확장\n    // if (type === \"gender\") {\n    //     requestData.keywordGroups[0].gender = value; // \"f\" 또는 \"m\"\n    //     // console.log(\"성별 요청 데이터: \", requestData); 확인됨\n    // }\n\n    // if (type === \"age\") {\n    //     requestData.keywordGroups[0].ages = [value]; // \"1\" ~ \"11\"\n    //     // console.log(\"연령별 요청 데이터: \", requestData); 확인됨\n    // }\n\n    try {\n      var _response$data;\n      const response = await axios.post(\"/api/trend\", requestData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"API 응답 데이터:\", response.data);\n      return ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.results) || []; // API 응답 결과 반환\n    } catch (err) {\n      console.error(\"데이터 요청 실패:\", err);\n      return [];\n    }\n  };\n\n  // 데이터 요청 및 처리\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        var _maleResponse$, _femaleResponse$;\n        // 일별 데이터 요청\n        const dailyResponse = await fetchTrendData(\"date\");\n        if (dailyResponse) {\n          // console.log(\"일별 데이터 업데이트:\", dailyResponse);\n          setDailyData(dailyResponse);\n        }\n\n        // 월별 데이터 요청\n        const monthlyResponse = await fetchTrendData(\"month\");\n        if (monthlyResponse) {\n          // console.log(\"월별 데이터 업데이트:\", monthlyResponse);\n          setMonthlyData(monthlyResponse);\n        }\n\n        // 성별 데이터 요청\n        const maleResponse = await fetchTrendData(\"date\", \"gender\", \"m\");\n        const femaleResponse = await fetchTrendData(\"date\", \"gender\", \"f\");\n\n        // 남성과 여성 검색량 합계 계산 후 비율 계산\n        const maleSum = (_maleResponse$ = maleResponse[0]) === null || _maleResponse$ === void 0 ? void 0 : _maleResponse$.data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n        const femaleSum = (_femaleResponse$ = femaleResponse[0]) === null || _femaleResponse$ === void 0 ? void 0 : _femaleResponse$.data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n        const totalGender = maleSum + femaleSum;\n        const genderData = {\n          m: (maleSum / totalGender * 100).toFixed(2),\n          f: (femaleSum / totalGender * 100).toFixed(2)\n        };\n        setGenderData(genderData);\n\n        // 연령별 데이터 요청\n        const ageGroups = {\n          \"10대\": [\"1\", \"2\"],\n          \"20대\": [\"3\", \"4\"],\n          \"30대\": [\"5\", \"6\"],\n          \"40대\": [\"7\", \"8\"],\n          \"50대\": [\"9\", \"10\"],\n          \"60대 이상\": [\"11\"]\n        };\n        let totalAgeSum = 0;\n        const ageGroupSums = {};\n        for (const [group, codes] of Object.entries(ageGroups)) {\n          let groupSum = 0;\n          for (const code of codes) {\n            var _ageResponse$;\n            // API 호출 결과 가져오는 부분\n            const ageResponse = await fetchTrendData(\"date\", \"age\", code);\n\n            // console.log(`연령대 코드 ${code} 응답 데이터:`, ageResponse[0]?.data || []);\n\n            const data = ((_ageResponse$ = ageResponse[0]) === null || _ageResponse$ === void 0 ? void 0 : _ageResponse$.data) || [];\n            groupSum += data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n          }\n\n          // console.log(`연령대: ${group}, 합계: ${groupSum}`);      // 확인\n          ageGroupSums[group] = groupSum;\n          totalAgeSum += groupSum;\n        }\n        // console.log(\"전체 연령대 합계:\", totalAgeSum); // 디버깅: 전체 합계\n\n        const agesData = {};\n        for (const [group, sum] of Object.entries(ageGroupSums)) {\n          agesData[group] = (sum / totalAgeSum * 100).toFixed(2);\n          // console.log(`연령대: ${group}, 비율: ${agesData[group]}%`); // 디버깅: 각 연령대 비율\n        }\n        setAgesData(agesData);\n\n        // console.log(\"성별 비율:\", genderData);\n        // console.log(\"연령대 비율:\", agesData);\n      } catch (err) {\n        console.error(\"데이터 요청 실패: \", err);\n        setError(\"데이터 요청에 실패했습니다.\");\n      }\n    };\n    fetchData();\n  }, [keyword]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 16\n    }, this);\n  }\n  if (!dailyData || !monthlyData || !genderData || !agesData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uB85C\\uB4DC \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"featured\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"featuredItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"featuredTitle\",\n          children: \"\\uC77C\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DailyChart, {\n          data: dailyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"featuredItem\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"featuredTitle\",\n          children: \"\\uC131\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"featuredItem\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"featuredTitle\",\n          children: \"\\uC5F0\\uB839\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"lineChart\",\n        children: \"\\uC6D4\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MonthlyChart, {\n        cata: monthlyData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n};\n_s(FeaturedInfo, \"rDRHvRQhryL3e1LQjbnSrLBBNow=\");\n_c = FeaturedInfo;\nexport default FeaturedInfo;\nvar _c;\n$RefreshReg$(_c, \"FeaturedInfo\");","map":{"version":3,"names":["React","useEffect","useState","DailyChart","MonthlyChart","axios","jsxDEV","_jsxDEV","FeaturedInfo","keyword","_s","dailyData","setDailyData","monthlyData","setMonthlyData","error","setError","calculateDateRange","timeUnit","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","startDate","endDate","fetchTrendData","type","value","trim","console","requestData","keywordGroups","groupName","keywords","_response$data","response","post","headers","log","data","results","err","fetchData","_maleResponse$","_femaleResponse$","dailyResponse","monthlyResponse","maleResponse","femaleResponse","maleSum","reduce","sum","curr","parseFloat","ratio","femaleSum","totalGender","genderData","m","toFixed","f","setGenderData","ageGroups","totalAgeSum","ageGroupSums","group","codes","Object","entries","groupSum","code","_ageResponse$","ageResponse","agesData","setAgesData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","cata","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './featuredInfo.css'\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\n\n const FeaturedInfo = ({ keyword }) => {\n    const [dailyData, setDailyData] = useState(null);\n    const [monthlyData, setMonthlyData] = useState(null);\n    // const [genderData, setGenderData] = useState(null);\n    // const [agesData, setAgesData] = useState([]);\n    const [error, setError] = useState(null);\n\n    // 현재 날짜 기준 요청 데이터 생성\n    const calculateDateRange = (timeUnit) => {\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, \"0\");\n        const day = String(now.getDate()).padStart(2, \"0\");\n\n        if (timeUnit === \"month\") {\n            // 월별 데이터: 해당 연도의 1월 1일부터 현재 날짜까지\n            const startDate = `${year}-01-01`; // 1월 1일\n            const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n            return { startDate, endDate };\n        } else if (timeUnit === \"date\") {\n            // 일별 데이터: 해당 월의 1일부터 현재 날짜까지\n            const startDate = `${year}-${month}-01`; // 이번 달의 1일\n            const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n            return { startDate, endDate };\n        }\n\n        // 기본값: 전체 연도 기준\n        const startDate = `${year}-01-01`;\n        const endDate = `${year}-${month}-${day}`;\n        return { startDate, endDate };\n\n    };\n        \n    const fetchTrendData = async (timeUnit, type, value) => {\n        if (!keyword || keyword.trim() === \"\") {\n            console.error(\"유효하지 않은 검색어:\", keyword);\n            setError(\"검색어를 입력하세요.\");\n            return null; // 빈 배열 반환\n        }\n\n        const { startDate, endDate } = calculateDateRange(timeUnit);\n        const requestData = {\n            startDate,\n            endDate,\n            timeUnit,\n            keywordGroups: [{ groupName: \"trend\", keywords: [keyword] }],\n        };\n        \n\n        // // 성별/연령대별 데이터를 요청하도록 requestData 확장\n        // if (type === \"gender\") {\n        //     requestData.keywordGroups[0].gender = value; // \"f\" 또는 \"m\"\n        //     // console.log(\"성별 요청 데이터: \", requestData); 확인됨\n        // }\n        \n        // if (type === \"age\") {\n        //     requestData.keywordGroups[0].ages = [value]; // \"1\" ~ \"11\"\n        //     // console.log(\"연령별 요청 데이터: \", requestData); 확인됨\n        // }\n\n\n        try {\n            const response = await axios.post(\"/api/trend\", requestData, {\n                headers: { \"Content-Type\": \"application/json\" }\n            });\n\n            console.log(\"API 응답 데이터:\", response.data);\n\n            return response.data?.results || []; // API 응답 결과 반환\n\n        } catch (err) {\n            console.error(\"데이터 요청 실패:\", err);\n            return [];\n        }\n    };\n  \n  \n    // 데이터 요청 및 처리\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // 일별 데이터 요청\n                const dailyResponse = await fetchTrendData(\"date\");\n                if (dailyResponse) {\n                    // console.log(\"일별 데이터 업데이트:\", dailyResponse);\n                    setDailyData(dailyResponse);\n                } \n\n                // 월별 데이터 요청\n                const monthlyResponse = await fetchTrendData(\"month\");\n                if (monthlyResponse) {\n                    // console.log(\"월별 데이터 업데이트:\", monthlyResponse);\n                    setMonthlyData(monthlyResponse);\n                }\n\n                // 성별 데이터 요청\n                const maleResponse = await fetchTrendData(\"date\", \"gender\", \"m\");\n                const femaleResponse = await fetchTrendData(\"date\", \"gender\", \"f\");\n\n\n                // 남성과 여성 검색량 합계 계산 후 비율 계산\n                const maleSum = maleResponse[0]?.data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n                const femaleSum = femaleResponse[0]?.data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n                const totalGender = maleSum + femaleSum;\n\n                const genderData = {\n                    m: ((maleSum / totalGender) * 100).toFixed(2),\n                    f: ((femaleSum / totalGender) * 100).toFixed(2),\n                };\n                setGenderData(genderData);\n\n                // 연령별 데이터 요청\n                const ageGroups = {\n                    \"10대\": [\"1\", \"2\"],\n                    \"20대\": [\"3\", \"4\"],\n                    \"30대\": [\"5\", \"6\"],\n                    \"40대\": [\"7\", \"8\"],\n                    \"50대\": [\"9\", \"10\"],\n                    \"60대 이상\": [\"11\"],\n                };\n\n                let totalAgeSum = 0;\n                const ageGroupSums = {};\n\n                for (const [group, codes] of Object.entries(ageGroups)) {\n                    let groupSum = 0;\n\n                    for (const code of codes) {\n                        // API 호출 결과 가져오는 부분\n                        const ageResponse = await fetchTrendData(\"date\", \"age\", code);\n\n                        // console.log(`연령대 코드 ${code} 응답 데이터:`, ageResponse[0]?.data || []);\n                        \n                        const data = ageResponse[0]?.data || [];\n                        groupSum += data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n                    }\n\n                    // console.log(`연령대: ${group}, 합계: ${groupSum}`);      // 확인\n                    ageGroupSums[group] = groupSum;\n                    totalAgeSum += groupSum;\n                }\n                // console.log(\"전체 연령대 합계:\", totalAgeSum); // 디버깅: 전체 합계\n\n\n                const agesData = {};\n                for (const [group, sum] of Object.entries(ageGroupSums)) {\n                    agesData[group] = ((sum / totalAgeSum) * 100).toFixed(2);\n                    // console.log(`연령대: ${group}, 비율: ${agesData[group]}%`); // 디버깅: 각 연령대 비율\n                }\n                setAgesData(agesData);\n\n                // console.log(\"성별 비율:\", genderData);\n                // console.log(\"연령대 비율:\", agesData);\n\n            } catch (err) {\n                console.error(\"데이터 요청 실패: \", err);\n                setError(\"데이터 요청에 실패했습니다.\");\n            }\n        };\n      \n        fetchData();\n    }, [keyword]);\n\n    if (error) {\n        return <p>{error}</p>;\n    }\n\n    if (!dailyData || !monthlyData || !genderData || !agesData ) {\n        return <p>데이터를 로드 중입니다...</p>;\n    }\n    \n    return (\n        <div className=\"featured\">\n            <div className=\"top\">\n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">일별 검색량</span>\n                        <DailyChart data={dailyData} />\n                </div>\n        \n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">성별 검색량</span>\n                        {/* <GenderChart data={genderData} /> */}\n                </div>\n        \n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">연령별 검색량</span>\n                        {/* <AgesChart data={agesData} /> */}\n                </div>\n            </div>\n            <div className=\"middle\">\n                <h3 className=\"lineChart\">월별 검색량</h3>\n                <MonthlyChart cata={monthlyData} />\n            </div>\n        </div>\n    );\n\n};\n        \n\nexport default FeaturedInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}