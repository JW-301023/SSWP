{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './featuredInfo.css';\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeaturedInfo = ({\n  keyword\n}) => {\n  _s();\n  const [dailyData, setDailyData] = useState(null);\n  const [monthlyData, setMonthlyData] = useState(null);\n  // const [genderData, setGenderData] = useState(\"\");\n  // const [agesData, setAgesData] = useState([]);\n  const [error, setError] = useState(null);\n\n  // 현재 날짜 기준 요청 데이터 생성\n  const calculateDateRange = timeUnit => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const day = String(now.getDate()).padStart(2, \"0\");\n    const startDate = timeUnit === \"month\" ? `${year}-01-01` : `${year}-${month}-01`;\n    const endDate = `${year}-${month}-${day}`;\n    return {\n      startDate,\n      endDate\n    };\n  };\n  const fetchTrendData = async timeUnit => {\n    if (!keyword || keyword.trim() === \"\") {\n      console.error(\"유효하지 않은 검색어:\", keyword);\n      setError(\"검색어를 입력하세요.\");\n      return null; // 빈 배열 반환\n    }\n    const {\n      startDate,\n      endDate\n    } = calculateDateRange(timeUnit);\n    const requestData = {\n      startDate,\n      endDate,\n      timeUnit,\n      keywordGroups: [{\n        groupName: \"trend\",\n        keywords: [keyword]\n      }]\n    };\n    console.log(\"Request data:\", requestData);\n    try {\n      const response = await axios.post(\"/api/trend\", requestData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.data || !response.data.results) {\n        console.error(\"유효하지 않은 응답 데이터:\", response.data);\n        setError(\"유효하지 않은 응답 데이터입니다.\");\n        return [];\n      }\n      return response.data.results;\n    } catch (err) {\n      console.error(\"데이터 요청 실패:\", err);\n      setError(\"데이터 요청에 실패했습니다.\");\n      return [];\n    }\n  };\n\n  // // 성별 및 연령대 데이터 그룹화 함수\n  // const groupData = (data) => {\n  //     if (!data) {\n  //         console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n  //         return {\n  //             genderData: { m: 0, f: 0 }, \n  //             agesData: {  \n  //                 \"10대\": 0,\n  //                 \"20대\": 0,\n  //                 \"30대\": 0,\n  //                 \"40대\": 0,\n  //                 \"50대\": 0,\n  //                 \"60대 이상\": 0,\n  //             }\n  //         }\n  //     }\n\n  //     const genderData = { m: 0, f: 0 };\n  //     const agesData = {\n  //             \"10대\": 0,\n  //             \"20대\": 0,\n  //             \"30대\": 0,\n  //             \"40대\": 0,\n  //             \"50대\": 0,\n  //             \"60대 이상\": 0,\n  //     };\n\n  //     data.forEach((entry) => {\n  //         if (entry.gender === \"m\") {\n  //             genderData.m += entry.value;\n  //         } else if (entry.gender === \"f\") {\n  //             genderData.f += entry.value;\n  //         }\n\n  //         (entry.ages || []).forEach((age) => {\n  //             if ([\"1\", \"2\"].includes(age)) agesData[\"10대\"] += entry.value;\n  //             else if ([\"3\", \"4\"].includes(age)) agesData[\"20대\"] += entry.value;\n  //             else if ([\"5\", \"6\"].includes(age)) agesData[\"30대\"] += entry.value;\n  //             else if ([\"7\", \"8\"].includes(age)) agesData[\"40대\"] += entry.value;\n  //             else if ([\"9\", \"10\"].includes(age)) agesData[\"50대\"] += entry.value;\n  //             else if ([\"11\"].includes(age)) agesData[\"60대 이상\"] += entry.value;\n  //         });\n  //     });\n\n  //     return { genderData, agesData };\n  // };\n\n  // // monthlyResponse 데이터 전처리 함수\n  // const preprocessMonthlyResponse = (monthlyResponse) => {\n  //     if (!Array.isArray(monthlyResponse) || monthlyResponse.length === 0) {\n  //         console.error(\"유효하지 않은 monthlyResponse 데이터:\", monthlyResponse);\n  //         return [];\n  //     }\n\n  //     // 데이터 변환\n  //     return monthlyResponse[0].data.map((entry) => ({\n  //         gender: null, // 성별 데이터가 없으므로 null로 설정\n  //         ages: [],     // 연령 데이터가 없으므로 빈 배열로 설정\n  //         value: entry.ratio, // \"ratio\" 값을 \"value\"로 매핑\n  //         period: entry.period // \"period\" 값 유지\n  //     }));\n  // };\n\n  // 데이터 요청 및 처리\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 일별 데이터 요청\n        const dailyResponse = await fetchTrendData(\"date\");\n        if (dailyResponse) {\n          console.log(\"일별 데이터 업데이트:\", dailyResponse);\n          setDailyData(dailyResponse);\n        }\n\n        // 월별 데이터 요청\n        const monthlyResponse = await fetchTrendData(\"month\");\n        if (monthlyResponse) {\n          console.log(\"월별 데이터 업데이트:\", monthlyResponse);\n          setMonthlyData(monthlyResponse);\n\n          // // 데이터 전처리\n          // const processedMonthlyData = preprocessMonthlyResponse(monthlyResponse);\n\n          // // 성별 및 연령 데이터 추출\n          // const groupedData = groupData(processedMonthlyData);\n          // setGenderData(groupedData.genderData);\n          // setAgesData(groupedData.agesData);\n\n          // console.log(\"Grouped Data:\", groupedData);\n          // console.log(\"Gender Data:\", groupedData.genderData);\n          // console.log(\"Ages Data:\", groupedData.agesData);\n        }\n      } catch (err) {\n        console.error(\"데이터 요청 실패: \", err);\n        setError(\"데이터 요청에 실패했습니다.\");\n      }\n    };\n    fetchData();\n  }, [keyword]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 16\n    }, this);\n  }\n  if (!dailyData || !monthlyData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uB85C\\uB4DC \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"featured\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"featuredItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"featuredTitle\",\n        children: \"\\uC77C\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DailyChart, {\n        data: dailyData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"featuredItem\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"featuredTitle\",\n        children: \"\\uC131\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"featuredItem\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"featuredTitle\",\n        children: \"\\uC5F0\\uB839\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feturedItem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(FeaturedInfo, \"rDRHvRQhryL3e1LQjbnSrLBBNow=\");\n_c = FeaturedInfo;\nexport default FeaturedInfo;\nvar _c;\n$RefreshReg$(_c, \"FeaturedInfo\");","map":{"version":3,"names":["React","useEffect","useState","DailyChart","MonthlyChart","axios","jsxDEV","_jsxDEV","FeaturedInfo","keyword","_s","dailyData","setDailyData","monthlyData","setMonthlyData","error","setError","calculateDateRange","timeUnit","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","startDate","endDate","fetchTrendData","trim","console","requestData","keywordGroups","groupName","keywords","log","response","post","headers","data","results","err","fetchData","dailyResponse","monthlyResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './featuredInfo.css'\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\n\n const FeaturedInfo = ({ keyword }) => {\n    const [dailyData, setDailyData] = useState(null);\n    const [monthlyData, setMonthlyData] = useState(null);\n    // const [genderData, setGenderData] = useState(\"\");\n    // const [agesData, setAgesData] = useState([]);\n    const [error, setError] = useState(null);\n\n    // 현재 날짜 기준 요청 데이터 생성\n    const calculateDateRange = (timeUnit) => {\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, \"0\");\n        const day = String(now.getDate()).padStart(2, \"0\");\n        const startDate = \n            timeUnit === \"month\" \n                ? `${year}-01-01` \n                : `${year}-${month}-01`;\n        const endDate = `${year}-${month}-${day}`;\n\n        return { startDate, endDate };\n    };\n        \n    const fetchTrendData = async (timeUnit) => {\n        if (!keyword || keyword.trim() === \"\") {\n            console.error(\"유효하지 않은 검색어:\", keyword);\n            setError(\"검색어를 입력하세요.\");\n            return null; // 빈 배열 반환\n        }\n\n        const { startDate, endDate } = calculateDateRange(timeUnit);\n        const requestData = {\n            startDate,\n            endDate,\n            timeUnit,\n            keywordGroups: [{ groupName: \"trend\", keywords: [keyword] }],\n        };\n\n        console.log(\"Request data:\", requestData);\n\n        try {\n            const response = await axios.post(\"/api/trend\", requestData, {\n                headers: { \"Content-Type\": \"application/json\" }\n            });\n\n            if (!response.data || !response.data.results) {\n                console.error(\"유효하지 않은 응답 데이터:\", response.data);\n                setError(\"유효하지 않은 응답 데이터입니다.\");\n                return [];\n            }\n    \n            return response.data.results;\n\n        } catch (err) {\n            console.error(\"데이터 요청 실패:\", err);\n            setError(\"데이터 요청에 실패했습니다.\");\n            return [];\n        }\n    };\n\n    // // 성별 및 연령대 데이터 그룹화 함수\n    // const groupData = (data) => {\n    //     if (!data) {\n    //         console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n    //         return {\n    //             genderData: { m: 0, f: 0 }, \n    //             agesData: {  \n    //                 \"10대\": 0,\n    //                 \"20대\": 0,\n    //                 \"30대\": 0,\n    //                 \"40대\": 0,\n    //                 \"50대\": 0,\n    //                 \"60대 이상\": 0,\n    //             }\n    //         }\n    //     }\n\n    //     const genderData = { m: 0, f: 0 };\n    //     const agesData = {\n    //             \"10대\": 0,\n    //             \"20대\": 0,\n    //             \"30대\": 0,\n    //             \"40대\": 0,\n    //             \"50대\": 0,\n    //             \"60대 이상\": 0,\n    //     };\n    \n    //     data.forEach((entry) => {\n    //         if (entry.gender === \"m\") {\n    //             genderData.m += entry.value;\n    //         } else if (entry.gender === \"f\") {\n    //             genderData.f += entry.value;\n    //         }\n\n    //         (entry.ages || []).forEach((age) => {\n    //             if ([\"1\", \"2\"].includes(age)) agesData[\"10대\"] += entry.value;\n    //             else if ([\"3\", \"4\"].includes(age)) agesData[\"20대\"] += entry.value;\n    //             else if ([\"5\", \"6\"].includes(age)) agesData[\"30대\"] += entry.value;\n    //             else if ([\"7\", \"8\"].includes(age)) agesData[\"40대\"] += entry.value;\n    //             else if ([\"9\", \"10\"].includes(age)) agesData[\"50대\"] += entry.value;\n    //             else if ([\"11\"].includes(age)) agesData[\"60대 이상\"] += entry.value;\n    //         });\n    //     });\n\n    //     return { genderData, agesData };\n    // };\n\n    // // monthlyResponse 데이터 전처리 함수\n    // const preprocessMonthlyResponse = (monthlyResponse) => {\n    //     if (!Array.isArray(monthlyResponse) || monthlyResponse.length === 0) {\n    //         console.error(\"유효하지 않은 monthlyResponse 데이터:\", monthlyResponse);\n    //         return [];\n    //     }\n\n    //     // 데이터 변환\n    //     return monthlyResponse[0].data.map((entry) => ({\n    //         gender: null, // 성별 데이터가 없으므로 null로 설정\n    //         ages: [],     // 연령 데이터가 없으므로 빈 배열로 설정\n    //         value: entry.ratio, // \"ratio\" 값을 \"value\"로 매핑\n    //         period: entry.period // \"period\" 값 유지\n    //     }));\n    // };\n\n  \n    // 데이터 요청 및 처리\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // 일별 데이터 요청\n                const dailyResponse = await fetchTrendData(\"date\");\n                if (dailyResponse) {\n                    console.log(\"일별 데이터 업데이트:\", dailyResponse);\n                    setDailyData(dailyResponse);\n                } \n\n                // 월별 데이터 요청\n                const monthlyResponse = await fetchTrendData(\"month\");\n                if (monthlyResponse) {\n                    console.log(\"월별 데이터 업데이트:\", monthlyResponse);\n                    setMonthlyData(monthlyResponse);\n\n                    // // 데이터 전처리\n                    // const processedMonthlyData = preprocessMonthlyResponse(monthlyResponse);\n\n                    // // 성별 및 연령 데이터 추출\n                    // const groupedData = groupData(processedMonthlyData);\n                    // setGenderData(groupedData.genderData);\n                    // setAgesData(groupedData.agesData);\n\n                    // console.log(\"Grouped Data:\", groupedData);\n                    // console.log(\"Gender Data:\", groupedData.genderData);\n                    // console.log(\"Ages Data:\", groupedData.agesData);\n                }\n            } catch (err) {\n                console.error(\"데이터 요청 실패: \", err);\n                setError(\"데이터 요청에 실패했습니다.\");\n            }\n        };\n      \n        fetchData();\n    }, [keyword]);\n\n    if (error) {\n        return <p>{error}</p>;\n    }\n\n    if (!dailyData || !monthlyData ) {\n        return <p>데이터를 로드 중입니다...</p>;\n    }\n    \n    return (\n        <div className=\"featured\">\n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">일별 검색량</span>\n                        <DailyChart data={dailyData} />\n                </div>\n        \n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">성별 검색량</span>\n                        {/* <GenderChart data={genderData} /> */}\n                </div>\n        \n                <div className=\"featuredItem\">\n                    <span className=\"featuredTitle\">연령별 검색량</span>\n                        {/* <AgesChart data={agesData} /> */}\n                </div>\n\n                <div className=\"feturedItem\">\n                    \n                </div>\n        </div>\n    );\n\n};\n        \n\nexport default FeaturedInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}