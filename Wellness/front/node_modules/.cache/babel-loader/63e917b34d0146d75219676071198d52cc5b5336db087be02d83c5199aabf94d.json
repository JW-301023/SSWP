{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./featuredInfo.css\";\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\nimport GenderChart from \"../chart/Genderchart\";\nimport AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeaturedInfo = ({\n  keyword\n}) => {\n  _s();\n  const [dailyData, setDailyData] = useState(null);\n  const [monthlyData, setMonthlyData] = useState(null);\n  const [genderData, setGenderData] = useState({\n    m: 0,\n    f: 0\n  });\n  const [agesData, setAgesData] = useState({\n    \"10대\": 0,\n    \"20대\": 0,\n    \"30대\": 0,\n    \"40대\": 0,\n    \"50대\": 0,\n    \"60대 이상\": 0\n  });\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // 현재 날짜 기준 요청 데이터 생성\n  const calculateDateRange = timeUnit => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n    const startDate = timeUnit === \"month\" ? `${year}-01-01` : `${year}-${month}-01`;\n    const endDate = `${year}-${month}-${lastDate}`;\n    return {\n      startDate,\n      endDate\n    };\n  };\n  const fetchTrendData = async timeUnit => {\n    if (!keyword || keyword.trim() === \"\") {\n      console.error(\"유효하지 않은 검색어:\", keyword);\n      setError(\"검색어를 입력하세요.\");\n      return null;\n    }\n    const {\n      startDate,\n      endDate\n    } = calculateDateRange(timeUnit);\n    const requestData = {\n      startDate,\n      endDate,\n      timeUnit,\n      keywordGroups: [{\n        groupName: \"trend\",\n        keywords: [keyword]\n      }]\n    };\n    try {\n      const response = await axios.post(\"/api/trend\", requestData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.data || !response.data.results) {\n        throw new Error(\"유효하지 않은 응답 데이터\");\n      }\n      return response.data;\n    } catch (err) {\n      console.error(\"데이터 요청 실패:\", err);\n      setError(\"데이터 요청에 실패했습니다.\");\n      return null;\n    }\n  };\n  const groupData = data => {\n    if (!data || !Array.isArray(data)) {\n      console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n      return {\n        genderData: {\n          m: 0,\n          f: 0\n        },\n        agesData: {\n          \"10대\": 0,\n          \"20대\": 0,\n          \"30대\": 0,\n          \"40대\": 0,\n          \"50대\": 0,\n          \"60대 이상\": 0\n        }\n      };\n    }\n    const genderData = {\n      m: 0,\n      f: 0\n    };\n    const agesData = {\n      \"10대\": 0,\n      \"20대\": 0,\n      \"30대\": 0,\n      \"40대\": 0,\n      \"50대\": 0,\n      \"60대 이상\": 0\n    };\n    data.forEach(entry => {\n      if (entry.gender === \"m\") {\n        genderData.m += entry.value;\n      } else if (entry.gender === \"f\") {\n        genderData.f += entry.value;\n      }\n      entry.ages.forEach(age => {\n        if ([\"1\", \"2\"].includes(age)) {\n          agesData[\"10대\"] += entry.value;\n        } else if ([\"3\", \"4\"].includes(age)) {\n          agesData[\"20대\"] += entry.value;\n        } else if ([\"5\", \"6\"].includes(age)) {\n          agesData[\"30대\"] += entry.value;\n        } else if ([\"7\", \"8\"].includes(age)) {\n          agesData[\"40대\"] += entry.value;\n        } else if ([\"9\", \"10\"].includes(age)) {\n          agesData[\"50대\"] += entry.value;\n        } else if ([\"11\"].includes(age)) {\n          agesData[\"60대 이상\"] += entry.value;\n        }\n      });\n    });\n    return {\n      genderData,\n      agesData\n    };\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        // 일별 데이터 요청\n        const dailyResponse = await fetchTrendData(\"date\");\n        if (dailyResponse) {\n          setDailyData(dailyResponse.results);\n        }\n\n        // 월별 데이터 요청\n        const monthlyResponse = await fetchTrendData(\"month\");\n        if (monthlyResponse) {\n          setMonthlyData(monthlyResponse.results);\n\n          // 성별 및 연령 데이터 추출\n          const groupedData = groupData(monthlyResponse.results);\n          setGenderData(groupedData.genderData);\n          setAgesData(groupedData.agesData);\n        }\n      } catch (err) {\n        console.error(err);\n        setError(\"데이터 요청에 실패했습니다.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [keyword]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB370\\uC774\\uD130\\uB97C \\uB85C\\uB4DC \\uC911\\uC785\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"featured\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"featuredItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"featuredTitle\",\n        children: \"\\uC77C\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DailyChart, {\n        data: dailyData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"featuredItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"featuredTitle\",\n        children: \"\\uC131\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GenderChart, {\n        data: genderData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"featuredItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"featuredTitle\",\n        children: \"\\uC5F0\\uB839\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AgesChart, {\n        data: agesData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n_s(FeaturedInfo, \"uhwMi+z/w59RZvb4ubkGZKsFJ50=\");\n_c = FeaturedInfo;\nexport default FeaturedInfo;\n\n// import React, { useEffect, useState } from \"react\";\n// import './featuredInfo.css'\n// import DailyChart from \"../chart/Dailychart\";\n// import MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\n// import axios from \"axios\";\n\n//  const FeaturedInfo = ({ keyword }) => {\n//     const [dailyData, setDailyData] = useState(null);\n//     const [monthlyData, setMonthlyData] = useState(null);\n//     const [genderData, setGenderData] = useState(\"\");\n//     const [agesData, setAgesData] = useState([]);\n//     const [error, setError] = useState(null);\n\n//     // 현재 날짜 기준 요청 데이터 생성\n//     const calculateDateRange = (timeUnit) => {\n//         const now = new Date();\n//         const year = now.getFullYear();\n//         const month = String(now.getMonth() + 1).padStart(2, \"0\");\n//         const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n\n//         const startDate = \n//             timeUnit === \"month\" \n//                 ? `${year}-01-01` \n//                 : `${year}-${month}-01`;\n//         const endDate = `${year}-${month}-${lastDate}`;\n\n//         return { startDate, endDate };\n//     };\n\n//     const fetchTrendData = async (timeUnit) => {\n//         const { startDate, endDate } = calculateDateRange(timeUnit);\n//         const requestData = {\n//             startDate,\n//             endDate,\n//             timeUnit,\n//             keywordGroups: [\n//                 {\n//                     groupName: \"trend\",\n//                     keywords: [keyword]\n//                 }\n//             ],\n//         };\n\n//         try {\n//             const response = await axios.post(\"/api/trend\", requestData, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\"\n//                 }\n//             });\n\n//             return response.data;\n\n//         } catch (err) {\n//             console.error(err);\n//             setError(\"데이터 요청에 실패했습니다.\");\n//             return null;\n//         }\n//     };\n\n//     // 성별 및 연령대 데이터 그룹화 함수\n//     const groupData = (data) => {\n//         if (!data || !Array.isArray(data)) {\n//             console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n//             return { genderData: { m: 0, f: 0 }, ageGroups: {} };\n//         }\n\n//         const genderData = { m: 0, f: 0 };\n//         const agesData = {\n//             \"10대\": 0,\n//             \"20대\": 0,\n//             \"30대\": 0,\n//             \"40대\": 0,\n//             \"50대\": 0,\n//             \"60대 이상\": 0,\n//         };\n\n//         data.forEach((entry) => {\n//             if (entry.gender === \"m\") {\n//                 genderData.m += entry.value;\n//             } else if (entry.gender === \"f\") {\n//                 genderData.f += entry.value;\n//             }\n\n//             entry.ages.forEach((age) => {\n//                 if ([\"1\", \"2\"].includes(age)) {\n//                     agesData[\"10대\"] += entry.value;\n//                 } else if ([\"3\", \"4\"].includes(age)) {\n//                     agesData[\"20대\"] += entry.value;\n//                 } else if ([\"5\", \"6\"].includes(age)) {\n//                     agesData[\"30대\"] += entry.value;\n//                 } else if ([\"7\", \"8\"].includes(age)) {\n//                     agesData[\"40대\"] += entry.value;\n//                 } else if ([\"9\", \"10\"].includes(age)) {\n//                     agesData[\"50대\"] += entry.value;\n//                 } else if ([\"11\"].includes(age)) {\n//                     agesData[\"60대 이상\"] += entry.value;\n//                 }\n//             });\n//         });\n\n//         return { genderData, agesData };\n//     };\n\n//     // 데이터 요청 및 처리\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // 일별 데이터 요청\n//                 const dailyResponse = await fetchTrendData(\"date\");\n//                 if (dailyResponse) {\n//                     setDailyData(dailyResponse.results);\n//                 }\n\n//                 // 월별 데이터 요청\n//                 const monthlyResponse = await fetchTrendData(\"month\");\n//                 if (monthlyResponse) {\n//                     setMonthlyData(monthlyResponse.results);\n\n//                     // 성별 및 연령 데이터 추출\n//                     const groupedData = groupData(monthlyResponse.results);\n//                     setGenderData(groupedData.genderData);\n//                     setAgesData(groupedData.agesData);\n//                 }\n//             } catch (err) {\n//                 console.error(err);\n//                 setError(\"데이터 요청에 실패했습니다.\");\n//             }\n//         };\n\n//         fetchData();\n//     }, [keyword]);\n\n//     if (error) {\n//         return <p>{error}</p>;\n//     }\n\n//     if (!dailyData || !monthlyData || !genderData || !agesData) {\n//         return <p>데이터를 로드 중입니다...</p>;\n//     }\n\n//     return (\n//         <div className=\"featured\">\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">일별 검색량</span>\n//                         <DailyChart data={dailyData} />\n//                 </div>\n\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">성별 검색량</span>\n//                         <GenderChart data={genderData} />\n//                 </div>\n\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">연령별 검색량</span>\n//                         <AgesChart data={agesData} />\n//                 </div>\n//         </div>\n//     );\n\n// };\n\n// export default FeaturedInfo;\nvar _c;\n$RefreshReg$(_c, \"FeaturedInfo\");","map":{"version":3,"names":["React","useEffect","useState","DailyChart","MonthlyChart","GenderChart","AgesChart","axios","jsxDEV","_jsxDEV","FeaturedInfo","keyword","_s","dailyData","setDailyData","monthlyData","setMonthlyData","genderData","setGenderData","m","f","agesData","setAgesData","error","setError","isLoading","setIsLoading","calculateDateRange","timeUnit","now","Date","year","getFullYear","month","String","getMonth","padStart","lastDate","getDate","startDate","endDate","fetchTrendData","trim","console","requestData","keywordGroups","groupName","keywords","response","post","headers","data","results","Error","err","groupData","Array","isArray","forEach","entry","gender","value","ages","age","includes","fetchData","dailyResponse","monthlyResponse","groupedData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./featuredInfo.css\";\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\nimport GenderChart from \"../chart/Genderchart\";\nimport AgesChart from \"../chart/Ageschart\";\nimport axios from \"axios\";\n\nconst FeaturedInfo = ({ keyword }) => {\n    const [dailyData, setDailyData] = useState(null);\n    const [monthlyData, setMonthlyData] = useState(null);\n    const [genderData, setGenderData] = useState({ m: 0, f: 0 });\n    const [agesData, setAgesData] = useState({\n        \"10대\": 0,\n        \"20대\": 0,\n        \"30대\": 0,\n        \"40대\": 0,\n        \"50대\": 0,\n        \"60대 이상\": 0,\n    });\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    // 현재 날짜 기준 요청 데이터 생성\n    const calculateDateRange = (timeUnit) => {\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, \"0\");\n        const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n\n        const startDate =\n            timeUnit === \"month\"\n                ? `${year}-01-01`\n                : `${year}-${month}-01`;\n        const endDate = `${year}-${month}-${lastDate}`;\n\n        return { startDate, endDate };\n    };\n\n    const fetchTrendData = async (timeUnit) => {\n        if (!keyword || keyword.trim() === \"\") {\n            console.error(\"유효하지 않은 검색어:\", keyword);\n            setError(\"검색어를 입력하세요.\");\n            return null;\n        }\n\n        const { startDate, endDate } = calculateDateRange(timeUnit);\n        const requestData = {\n            startDate,\n            endDate,\n            timeUnit,\n            keywordGroups: [\n                {\n                    groupName: \"trend\",\n                    keywords: [keyword],\n                },\n            ],\n        };\n\n        try {\n            const response = await axios.post(\"/api/trend\", requestData, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            });\n\n            if (!response.data || !response.data.results) {\n                throw new Error(\"유효하지 않은 응답 데이터\");\n            }\n\n            return response.data;\n        } catch (err) {\n            console.error(\"데이터 요청 실패:\", err);\n            setError(\"데이터 요청에 실패했습니다.\");\n            return null;\n        }\n    };\n\n    const groupData = (data) => {\n        if (!data || !Array.isArray(data)) {\n            console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n            return {\n                genderData: { m: 0, f: 0 },\n                agesData: {\n                    \"10대\": 0,\n                    \"20대\": 0,\n                    \"30대\": 0,\n                    \"40대\": 0,\n                    \"50대\": 0,\n                    \"60대 이상\": 0,\n                },\n            };\n        }\n\n        const genderData = { m: 0, f: 0 };\n        const agesData = {\n            \"10대\": 0,\n            \"20대\": 0,\n            \"30대\": 0,\n            \"40대\": 0,\n            \"50대\": 0,\n            \"60대 이상\": 0,\n        };\n\n        data.forEach((entry) => {\n            if (entry.gender === \"m\") {\n                genderData.m += entry.value;\n            } else if (entry.gender === \"f\") {\n                genderData.f += entry.value;\n            }\n\n            entry.ages.forEach((age) => {\n                if ([\"1\", \"2\"].includes(age)) {\n                    agesData[\"10대\"] += entry.value;\n                } else if ([\"3\", \"4\"].includes(age)) {\n                    agesData[\"20대\"] += entry.value;\n                } else if ([\"5\", \"6\"].includes(age)) {\n                    agesData[\"30대\"] += entry.value;\n                } else if ([\"7\", \"8\"].includes(age)) {\n                    agesData[\"40대\"] += entry.value;\n                } else if ([\"9\", \"10\"].includes(age)) {\n                    agesData[\"50대\"] += entry.value;\n                } else if ([\"11\"].includes(age)) {\n                    agesData[\"60대 이상\"] += entry.value;\n                }\n            });\n        });\n\n        return { genderData, agesData };\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setIsLoading(true);\n            try {\n                // 일별 데이터 요청\n                const dailyResponse = await fetchTrendData(\"date\");\n                if (dailyResponse) {\n                    setDailyData(dailyResponse.results);\n                }\n\n                // 월별 데이터 요청\n                const monthlyResponse = await fetchTrendData(\"month\");\n                if (monthlyResponse) {\n                    setMonthlyData(monthlyResponse.results);\n\n                    // 성별 및 연령 데이터 추출\n                    const groupedData = groupData(monthlyResponse.results);\n                    setGenderData(groupedData.genderData);\n                    setAgesData(groupedData.agesData);\n                }\n            } catch (err) {\n                console.error(err);\n                setError(\"데이터 요청에 실패했습니다.\");\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [keyword]);\n\n    if (isLoading) {\n        return <p>데이터를 로드 중입니다...</p>;\n    }\n\n    if (error) {\n        return <p>{error}</p>;\n    }\n\n    return (\n        <div className=\"featured\">\n            <div className=\"featuredItem\">\n                <span className=\"featuredTitle\">일별 검색량</span>\n                <DailyChart data={dailyData} />\n            </div>\n\n            <div className=\"featuredItem\">\n                <span className=\"featuredTitle\">성별 검색량</span>\n                <GenderChart data={genderData} />\n            </div>\n\n            <div className=\"featuredItem\">\n                <span className=\"featuredTitle\">연령별 검색량</span>\n                <AgesChart data={agesData} />\n            </div>\n        </div>\n    );\n};\n\nexport default FeaturedInfo;\n\n// import React, { useEffect, useState } from \"react\";\n// import './featuredInfo.css'\n// import DailyChart from \"../chart/Dailychart\";\n// import MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\n// import axios from \"axios\";\n\n//  const FeaturedInfo = ({ keyword }) => {\n//     const [dailyData, setDailyData] = useState(null);\n//     const [monthlyData, setMonthlyData] = useState(null);\n//     const [genderData, setGenderData] = useState(\"\");\n//     const [agesData, setAgesData] = useState([]);\n//     const [error, setError] = useState(null);\n\n//     // 현재 날짜 기준 요청 데이터 생성\n//     const calculateDateRange = (timeUnit) => {\n//         const now = new Date();\n//         const year = now.getFullYear();\n//         const month = String(now.getMonth() + 1).padStart(2, \"0\");\n//         const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n\n//         const startDate = \n//             timeUnit === \"month\" \n//                 ? `${year}-01-01` \n//                 : `${year}-${month}-01`;\n//         const endDate = `${year}-${month}-${lastDate}`;\n\n//         return { startDate, endDate };\n//     };\n        \n//     const fetchTrendData = async (timeUnit) => {\n//         const { startDate, endDate } = calculateDateRange(timeUnit);\n//         const requestData = {\n//             startDate,\n//             endDate,\n//             timeUnit,\n//             keywordGroups: [\n//                 {\n//                     groupName: \"trend\",\n//                     keywords: [keyword]\n//                 }\n//             ],\n//         };\n\n//         try {\n//             const response = await axios.post(\"/api/trend\", requestData, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\"\n//                 }\n//             });\n\n//             return response.data;\n\n//         } catch (err) {\n//             console.error(err);\n//             setError(\"데이터 요청에 실패했습니다.\");\n//             return null;\n//         }\n//     };\n\n//     // 성별 및 연령대 데이터 그룹화 함수\n//     const groupData = (data) => {\n//         if (!data || !Array.isArray(data)) {\n//             console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n//             return { genderData: { m: 0, f: 0 }, ageGroups: {} };\n//         }\n\n//         const genderData = { m: 0, f: 0 };\n//         const agesData = {\n//             \"10대\": 0,\n//             \"20대\": 0,\n//             \"30대\": 0,\n//             \"40대\": 0,\n//             \"50대\": 0,\n//             \"60대 이상\": 0,\n//         };\n\n//         data.forEach((entry) => {\n//             if (entry.gender === \"m\") {\n//                 genderData.m += entry.value;\n//             } else if (entry.gender === \"f\") {\n//                 genderData.f += entry.value;\n//             }\n\n//             entry.ages.forEach((age) => {\n//                 if ([\"1\", \"2\"].includes(age)) {\n//                     agesData[\"10대\"] += entry.value;\n//                 } else if ([\"3\", \"4\"].includes(age)) {\n//                     agesData[\"20대\"] += entry.value;\n//                 } else if ([\"5\", \"6\"].includes(age)) {\n//                     agesData[\"30대\"] += entry.value;\n//                 } else if ([\"7\", \"8\"].includes(age)) {\n//                     agesData[\"40대\"] += entry.value;\n//                 } else if ([\"9\", \"10\"].includes(age)) {\n//                     agesData[\"50대\"] += entry.value;\n//                 } else if ([\"11\"].includes(age)) {\n//                     agesData[\"60대 이상\"] += entry.value;\n//                 }\n//             });\n//         });\n\n//         return { genderData, agesData };\n//     };\n\n  \n//     // 데이터 요청 및 처리\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // 일별 데이터 요청\n//                 const dailyResponse = await fetchTrendData(\"date\");\n//                 if (dailyResponse) {\n//                     setDailyData(dailyResponse.results);\n//                 }\n\n//                 // 월별 데이터 요청\n//                 const monthlyResponse = await fetchTrendData(\"month\");\n//                 if (monthlyResponse) {\n//                     setMonthlyData(monthlyResponse.results);\n\n//                     // 성별 및 연령 데이터 추출\n//                     const groupedData = groupData(monthlyResponse.results);\n//                     setGenderData(groupedData.genderData);\n//                     setAgesData(groupedData.agesData);\n//                 }\n//             } catch (err) {\n//                 console.error(err);\n//                 setError(\"데이터 요청에 실패했습니다.\");\n//             }\n//         };\n      \n//         fetchData();\n//     }, [keyword]);\n\n//     if (error) {\n//         return <p>{error}</p>;\n//     }\n\n//     if (!dailyData || !monthlyData || !genderData || !agesData) {\n//         return <p>데이터를 로드 중입니다...</p>;\n//     }\n    \n//     return (\n//         <div className=\"featured\">\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">일별 검색량</span>\n//                         <DailyChart data={dailyData} />\n//                 </div>\n        \n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">성별 검색량</span>\n//                         <GenderChart data={genderData} />\n//                 </div>\n        \n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">연령별 검색량</span>\n//                         <AgesChart data={agesData} />\n//                 </div>\n//         </div>\n//     );\n\n// };\n        \n\n// export default FeaturedInfo;\n"],"mappings":"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,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC7D,EAAA,CApLIF,YAAY;AAAAiE,EAAA,GAAZjE,YAAY;AAsLlB,eAAeA,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AAAA,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}