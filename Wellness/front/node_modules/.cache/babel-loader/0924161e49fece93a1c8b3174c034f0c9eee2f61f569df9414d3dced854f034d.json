{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import \"./featuredInfo.css\";\n// import DailyChart from \"../chart/Dailychart\";\n// import MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\n// import axios from \"axios\";\n\n// const FeaturedInfo = ({ keyword }) => {\n//     const [dailyData, setDailyData] = useState(null);\n//     const [monthlyData, setMonthlyData] = useState(null);\n//     const [genderData, setGenderData] = useState({ m: 0, f: 0 });\n//     const [agesData, setAgesData] = useState({\n//         \"10대\": 0,\n//         \"20대\": 0,\n//         \"30대\": 0,\n//         \"40대\": 0,\n//         \"50대\": 0,\n//         \"60대 이상\": 0,\n//     });\n//     const [error, setError] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n\n//     // 현재 날짜 기준 요청 데이터 생성\n//     const calculateDateRange = (timeUnit) => {\n//         const now = new Date();\n//         const year = now.getFullYear();\n//         const month = String(now.getMonth() + 1).padStart(2, \"0\");\n//         const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n\n//         const startDate =\n//             timeUnit === \"month\"\n//                 ? `${year}-01-01`\n//                 : `${year}-${month}-01`;\n//         const endDate = `${year}-${month}-${lastDate}`;\n\n//         return { startDate, endDate };\n//     };\n\n//     const fetchTrendData = async (timeUnit) => {\n//         if (!keyword || keyword.trim() === \"\") {\n//             console.error(\"유효하지 않은 검색어:\", keyword);\n//             setError(\"검색어를 입력하세요.\");\n//             return null;\n//         }\n\n//         const { startDate, endDate } = calculateDateRange(timeUnit);\n//         const requestData = {\n//             startDate,\n//             endDate,\n//             timeUnit,\n//             keywordGroups: [\n//                 {\n//                     groupName: \"trend\",\n//                     keywords: [keyword],\n//                 },\n//             ],\n//         };\n\n//         try {\n//             const response = await axios.post(\"/api/trend\", requestData, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//             });\n\n//             if (!response.data || !response.data.results) {\n//                 throw new Error(\"유효하지 않은 응답 데이터\");\n//             }\n\n//             return response.data;\n//         } catch (err) {\n//             console.error(\"데이터 요청 실패:\", err);\n//             setError(\"데이터 요청에 실패했습니다.\");\n//             return null;\n//         }\n//     };\n\n//     const groupData = (data) => {\n//         if (!data || !Array.isArray(data)) {\n//             console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n//             return {\n//                 genderData: { m: 0, f: 0 },\n//                 agesData: {\n//                     \"10대\": 0,\n//                     \"20대\": 0,\n//                     \"30대\": 0,\n//                     \"40대\": 0,\n//                     \"50대\": 0,\n//                     \"60대 이상\": 0,\n//                 },\n//             };\n//         }\n\n//         const genderData = { m: 0, f: 0 };\n//         const agesData = {\n//             \"10대\": 0,\n//             \"20대\": 0,\n//             \"30대\": 0,\n//             \"40대\": 0,\n//             \"50대\": 0,\n//             \"60대 이상\": 0,\n//         };\n\n//         data.forEach((entry) => {\n//             if (entry.gender === \"m\") {\n//                 genderData.m += entry.value;\n//             } else if (entry.gender === \"f\") {\n//                 genderData.f += entry.value;\n//             }\n\n//             entry.ages.forEach((age) => {\n//                 if ([\"1\", \"2\"].includes(age)) {\n//                     agesData[\"10대\"] += entry.value;\n//                 } else if ([\"3\", \"4\"].includes(age)) {\n//                     agesData[\"20대\"] += entry.value;\n//                 } else if ([\"5\", \"6\"].includes(age)) {\n//                     agesData[\"30대\"] += entry.value;\n//                 } else if ([\"7\", \"8\"].includes(age)) {\n//                     agesData[\"40대\"] += entry.value;\n//                 } else if ([\"9\", \"10\"].includes(age)) {\n//                     agesData[\"50대\"] += entry.value;\n//                 } else if ([\"11\"].includes(age)) {\n//                     agesData[\"60대 이상\"] += entry.value;\n//                 }\n//             });\n//         });\n\n//         return { genderData, agesData };\n//     };\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setIsLoading(true);\n//             try {\n//                 // 일별 데이터 요청\n//                 const dailyResponse = await fetchTrendData(\"date\");\n//                 if (dailyResponse) {\n//                     setDailyData(dailyResponse.results);\n//                 }\n\n//                 // 월별 데이터 요청\n//                 const monthlyResponse = await fetchTrendData(\"month\");\n//                 if (monthlyResponse) {\n//                     setMonthlyData(monthlyResponse.results);\n\n//                     // 성별 및 연령 데이터 추출\n//                     const groupedData = groupData(monthlyResponse.results);\n//                     setGenderData(groupedData.genderData);\n//                     setAgesData(groupedData.agesData);\n//                 }\n//             } catch (err) {\n//                 console.error(err);\n//                 setError(\"데이터 요청에 실패했습니다.\");\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, [keyword]);\n\n//     if (isLoading) {\n//         return <p>데이터를 로드 중입니다...</p>;\n//     }\n\n//     if (error) {\n//         return <p>{error}</p>;\n//     }\n\n//     return (\n//         <div className=\"featured\">\n//             <div className=\"featuredItem\">\n//                 <span className=\"featuredTitle\">일별 검색량</span>\n//                 <DailyChart data={dailyData} />\n//             </div>\n\n//             <div className=\"featuredItem\">\n//                 <span className=\"featuredTitle\">성별 검색량</span>\n//                 <GenderChart data={genderData} />\n//             </div>\n\n//             <div className=\"featuredItem\">\n//                 <span className=\"featuredTitle\">연령별 검색량</span>\n//                 <AgesChart data={agesData} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default FeaturedInfo;\n\n// import React, { useEffect, useState } from \"react\";\n// import './featuredInfo.css'\n// import DailyChart from \"../chart/Dailychart\";\n// import MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\n// import axios from \"axios\";\n\n//  const FeaturedInfo = ({ keyword }) => {\n//     const [dailyData, setDailyData] = useState(null);\n//     const [monthlyData, setMonthlyData] = useState(null);\n//     const [genderData, setGenderData] = useState(\"\");\n//     const [agesData, setAgesData] = useState([]);\n//     const [error, setError] = useState(null);\n\n//     // 현재 날짜 기준 요청 데이터 생성\n//     const calculateDateRange = (timeUnit) => {\n//         const now = new Date();\n//         const year = now.getFullYear();\n//         const month = String(now.getMonth() + 1).padStart(2, \"0\");\n//         const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n\n//         const startDate = \n//             timeUnit === \"month\" \n//                 ? `${year}-01-01` \n//                 : `${year}-${month}-01`;\n//         const endDate = `${year}-${month}-${lastDate}`;\n\n//         return { startDate, endDate };\n//     };\n\n//     const fetchTrendData = async (timeUnit) => {\n//         const { startDate, endDate } = calculateDateRange(timeUnit);\n//         const requestData = {\n//             startDate,\n//             endDate,\n//             timeUnit,\n//             keywordGroups: [\n//                 {\n//                     groupName: \"trend\",\n//                     keywords: [keyword]\n//                 }\n//             ],\n//         };\n\n//         try {\n//             const response = await axios.post(\"/api/trend\", requestData, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\"\n//                 }\n//             });\n\n//             return response.data;\n\n//         } catch (err) {\n//             console.error(err);\n//             setError(\"데이터 요청에 실패했습니다.\");\n//             return null;\n//         }\n//     };\n\n//     // 성별 및 연령대 데이터 그룹화 함수\n//     const groupData = (data) => {\n//         if (!data || !Array.isArray(data)) {\n//             console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n//             return { genderData: { m: 0, f: 0 }, ageGroups: {} };\n//         }\n\n//         const genderData = { m: 0, f: 0 };\n//         const agesData = {\n//             \"10대\": 0,\n//             \"20대\": 0,\n//             \"30대\": 0,\n//             \"40대\": 0,\n//             \"50대\": 0,\n//             \"60대 이상\": 0,\n//         };\n\n//         data.forEach((entry) => {\n//             if (entry.gender === \"m\") {\n//                 genderData.m += entry.value;\n//             } else if (entry.gender === \"f\") {\n//                 genderData.f += entry.value;\n//             }\n\n//             entry.ages.forEach((age) => {\n//                 if ([\"1\", \"2\"].includes(age)) {\n//                     agesData[\"10대\"] += entry.value;\n//                 } else if ([\"3\", \"4\"].includes(age)) {\n//                     agesData[\"20대\"] += entry.value;\n//                 } else if ([\"5\", \"6\"].includes(age)) {\n//                     agesData[\"30대\"] += entry.value;\n//                 } else if ([\"7\", \"8\"].includes(age)) {\n//                     agesData[\"40대\"] += entry.value;\n//                 } else if ([\"9\", \"10\"].includes(age)) {\n//                     agesData[\"50대\"] += entry.value;\n//                 } else if ([\"11\"].includes(age)) {\n//                     agesData[\"60대 이상\"] += entry.value;\n//                 }\n//             });\n//         });\n\n//         return { genderData, agesData };\n//     };\n\n//     // 데이터 요청 및 처리\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // 일별 데이터 요청\n//                 const dailyResponse = await fetchTrendData(\"date\");\n//                 if (dailyResponse) {\n//                     setDailyData(dailyResponse.results);\n//                 }\n\n//                 // 월별 데이터 요청\n//                 const monthlyResponse = await fetchTrendData(\"month\");\n//                 if (monthlyResponse) {\n//                     setMonthlyData(monthlyResponse.results);\n\n//                     // 성별 및 연령 데이터 추출\n//                     const groupedData = groupData(monthlyResponse.results);\n//                     setGenderData(groupedData.genderData);\n//                     setAgesData(groupedData.agesData);\n//                 }\n//             } catch (err) {\n//                 console.error(err);\n//                 setError(\"데이터 요청에 실패했습니다.\");\n//             }\n//         };\n\n//         fetchData();\n//     }, [keyword]);\n\n//     if (error) {\n//         return <p>{error}</p>;\n//     }\n\n//     if (!dailyData || !monthlyData || !genderData || !agesData) {\n//         return <p>데이터를 로드 중입니다...</p>;\n//     }\n\n//     return (\n//         <div className=\"featured\">\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">일별 검색량</span>\n//                         <DailyChart data={dailyData} />\n//                 </div>\n\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">성별 검색량</span>\n//                         <GenderChart data={genderData} />\n//                 </div>\n\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">연령별 검색량</span>\n//                         <AgesChart data={agesData} />\n//                 </div>\n//         </div>\n//     );\n\n// };\n\n// export default FeaturedInfo;","map":{"version":3,"names":[],"sources":["/Users/Seul/Desktop/react/front/src/components/featuredInfo/FeaturedInfo.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import \"./featuredInfo.css\";\n// import DailyChart from \"../chart/Dailychart\";\n// import MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\n// import axios from \"axios\";\n\n// const FeaturedInfo = ({ keyword }) => {\n//     const [dailyData, setDailyData] = useState(null);\n//     const [monthlyData, setMonthlyData] = useState(null);\n//     const [genderData, setGenderData] = useState({ m: 0, f: 0 });\n//     const [agesData, setAgesData] = useState({\n//         \"10대\": 0,\n//         \"20대\": 0,\n//         \"30대\": 0,\n//         \"40대\": 0,\n//         \"50대\": 0,\n//         \"60대 이상\": 0,\n//     });\n//     const [error, setError] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n\n//     // 현재 날짜 기준 요청 데이터 생성\n//     const calculateDateRange = (timeUnit) => {\n//         const now = new Date();\n//         const year = now.getFullYear();\n//         const month = String(now.getMonth() + 1).padStart(2, \"0\");\n//         const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n\n//         const startDate =\n//             timeUnit === \"month\"\n//                 ? `${year}-01-01`\n//                 : `${year}-${month}-01`;\n//         const endDate = `${year}-${month}-${lastDate}`;\n\n//         return { startDate, endDate };\n//     };\n\n//     const fetchTrendData = async (timeUnit) => {\n//         if (!keyword || keyword.trim() === \"\") {\n//             console.error(\"유효하지 않은 검색어:\", keyword);\n//             setError(\"검색어를 입력하세요.\");\n//             return null;\n//         }\n\n//         const { startDate, endDate } = calculateDateRange(timeUnit);\n//         const requestData = {\n//             startDate,\n//             endDate,\n//             timeUnit,\n//             keywordGroups: [\n//                 {\n//                     groupName: \"trend\",\n//                     keywords: [keyword],\n//                 },\n//             ],\n//         };\n\n//         try {\n//             const response = await axios.post(\"/api/trend\", requestData, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//             });\n\n//             if (!response.data || !response.data.results) {\n//                 throw new Error(\"유효하지 않은 응답 데이터\");\n//             }\n\n//             return response.data;\n//         } catch (err) {\n//             console.error(\"데이터 요청 실패:\", err);\n//             setError(\"데이터 요청에 실패했습니다.\");\n//             return null;\n//         }\n//     };\n\n//     const groupData = (data) => {\n//         if (!data || !Array.isArray(data)) {\n//             console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n//             return {\n//                 genderData: { m: 0, f: 0 },\n//                 agesData: {\n//                     \"10대\": 0,\n//                     \"20대\": 0,\n//                     \"30대\": 0,\n//                     \"40대\": 0,\n//                     \"50대\": 0,\n//                     \"60대 이상\": 0,\n//                 },\n//             };\n//         }\n\n//         const genderData = { m: 0, f: 0 };\n//         const agesData = {\n//             \"10대\": 0,\n//             \"20대\": 0,\n//             \"30대\": 0,\n//             \"40대\": 0,\n//             \"50대\": 0,\n//             \"60대 이상\": 0,\n//         };\n\n//         data.forEach((entry) => {\n//             if (entry.gender === \"m\") {\n//                 genderData.m += entry.value;\n//             } else if (entry.gender === \"f\") {\n//                 genderData.f += entry.value;\n//             }\n\n//             entry.ages.forEach((age) => {\n//                 if ([\"1\", \"2\"].includes(age)) {\n//                     agesData[\"10대\"] += entry.value;\n//                 } else if ([\"3\", \"4\"].includes(age)) {\n//                     agesData[\"20대\"] += entry.value;\n//                 } else if ([\"5\", \"6\"].includes(age)) {\n//                     agesData[\"30대\"] += entry.value;\n//                 } else if ([\"7\", \"8\"].includes(age)) {\n//                     agesData[\"40대\"] += entry.value;\n//                 } else if ([\"9\", \"10\"].includes(age)) {\n//                     agesData[\"50대\"] += entry.value;\n//                 } else if ([\"11\"].includes(age)) {\n//                     agesData[\"60대 이상\"] += entry.value;\n//                 }\n//             });\n//         });\n\n//         return { genderData, agesData };\n//     };\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             setIsLoading(true);\n//             try {\n//                 // 일별 데이터 요청\n//                 const dailyResponse = await fetchTrendData(\"date\");\n//                 if (dailyResponse) {\n//                     setDailyData(dailyResponse.results);\n//                 }\n\n//                 // 월별 데이터 요청\n//                 const monthlyResponse = await fetchTrendData(\"month\");\n//                 if (monthlyResponse) {\n//                     setMonthlyData(monthlyResponse.results);\n\n//                     // 성별 및 연령 데이터 추출\n//                     const groupedData = groupData(monthlyResponse.results);\n//                     setGenderData(groupedData.genderData);\n//                     setAgesData(groupedData.agesData);\n//                 }\n//             } catch (err) {\n//                 console.error(err);\n//                 setError(\"데이터 요청에 실패했습니다.\");\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         fetchData();\n//     }, [keyword]);\n\n//     if (isLoading) {\n//         return <p>데이터를 로드 중입니다...</p>;\n//     }\n\n//     if (error) {\n//         return <p>{error}</p>;\n//     }\n\n//     return (\n//         <div className=\"featured\">\n//             <div className=\"featuredItem\">\n//                 <span className=\"featuredTitle\">일별 검색량</span>\n//                 <DailyChart data={dailyData} />\n//             </div>\n\n//             <div className=\"featuredItem\">\n//                 <span className=\"featuredTitle\">성별 검색량</span>\n//                 <GenderChart data={genderData} />\n//             </div>\n\n//             <div className=\"featuredItem\">\n//                 <span className=\"featuredTitle\">연령별 검색량</span>\n//                 <AgesChart data={agesData} />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default FeaturedInfo;\n\n// import React, { useEffect, useState } from \"react\";\n// import './featuredInfo.css'\n// import DailyChart from \"../chart/Dailychart\";\n// import MonthlyChart from \"../chart/Monthlychart\";\n// import GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\n// import axios from \"axios\";\n\n//  const FeaturedInfo = ({ keyword }) => {\n//     const [dailyData, setDailyData] = useState(null);\n//     const [monthlyData, setMonthlyData] = useState(null);\n//     const [genderData, setGenderData] = useState(\"\");\n//     const [agesData, setAgesData] = useState([]);\n//     const [error, setError] = useState(null);\n\n//     // 현재 날짜 기준 요청 데이터 생성\n//     const calculateDateRange = (timeUnit) => {\n//         const now = new Date();\n//         const year = now.getFullYear();\n//         const month = String(now.getMonth() + 1).padStart(2, \"0\");\n//         const lastDate = new Date(year, now.getMonth() + 1, 0).getDate();\n\n//         const startDate = \n//             timeUnit === \"month\" \n//                 ? `${year}-01-01` \n//                 : `${year}-${month}-01`;\n//         const endDate = `${year}-${month}-${lastDate}`;\n\n//         return { startDate, endDate };\n//     };\n        \n//     const fetchTrendData = async (timeUnit) => {\n//         const { startDate, endDate } = calculateDateRange(timeUnit);\n//         const requestData = {\n//             startDate,\n//             endDate,\n//             timeUnit,\n//             keywordGroups: [\n//                 {\n//                     groupName: \"trend\",\n//                     keywords: [keyword]\n//                 }\n//             ],\n//         };\n\n//         try {\n//             const response = await axios.post(\"/api/trend\", requestData, {\n//                 headers: {\n//                     \"Content-Type\": \"application/json\"\n//                 }\n//             });\n\n//             return response.data;\n\n//         } catch (err) {\n//             console.error(err);\n//             setError(\"데이터 요청에 실패했습니다.\");\n//             return null;\n//         }\n//     };\n\n//     // 성별 및 연령대 데이터 그룹화 함수\n//     const groupData = (data) => {\n//         if (!data || !Array.isArray(data)) {\n//             console.error(\"groupData 함수에 전달된 데이터가 유효하지 않습니다:\", data);\n//             return { genderData: { m: 0, f: 0 }, ageGroups: {} };\n//         }\n\n//         const genderData = { m: 0, f: 0 };\n//         const agesData = {\n//             \"10대\": 0,\n//             \"20대\": 0,\n//             \"30대\": 0,\n//             \"40대\": 0,\n//             \"50대\": 0,\n//             \"60대 이상\": 0,\n//         };\n\n//         data.forEach((entry) => {\n//             if (entry.gender === \"m\") {\n//                 genderData.m += entry.value;\n//             } else if (entry.gender === \"f\") {\n//                 genderData.f += entry.value;\n//             }\n\n//             entry.ages.forEach((age) => {\n//                 if ([\"1\", \"2\"].includes(age)) {\n//                     agesData[\"10대\"] += entry.value;\n//                 } else if ([\"3\", \"4\"].includes(age)) {\n//                     agesData[\"20대\"] += entry.value;\n//                 } else if ([\"5\", \"6\"].includes(age)) {\n//                     agesData[\"30대\"] += entry.value;\n//                 } else if ([\"7\", \"8\"].includes(age)) {\n//                     agesData[\"40대\"] += entry.value;\n//                 } else if ([\"9\", \"10\"].includes(age)) {\n//                     agesData[\"50대\"] += entry.value;\n//                 } else if ([\"11\"].includes(age)) {\n//                     agesData[\"60대 이상\"] += entry.value;\n//                 }\n//             });\n//         });\n\n//         return { genderData, agesData };\n//     };\n\n  \n//     // 데이터 요청 및 처리\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // 일별 데이터 요청\n//                 const dailyResponse = await fetchTrendData(\"date\");\n//                 if (dailyResponse) {\n//                     setDailyData(dailyResponse.results);\n//                 }\n\n//                 // 월별 데이터 요청\n//                 const monthlyResponse = await fetchTrendData(\"month\");\n//                 if (monthlyResponse) {\n//                     setMonthlyData(monthlyResponse.results);\n\n//                     // 성별 및 연령 데이터 추출\n//                     const groupedData = groupData(monthlyResponse.results);\n//                     setGenderData(groupedData.genderData);\n//                     setAgesData(groupedData.agesData);\n//                 }\n//             } catch (err) {\n//                 console.error(err);\n//                 setError(\"데이터 요청에 실패했습니다.\");\n//             }\n//         };\n      \n//         fetchData();\n//     }, [keyword]);\n\n//     if (error) {\n//         return <p>{error}</p>;\n//     }\n\n//     if (!dailyData || !monthlyData || !genderData || !agesData) {\n//         return <p>데이터를 로드 중입니다...</p>;\n//     }\n    \n//     return (\n//         <div className=\"featured\">\n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">일별 검색량</span>\n//                         <DailyChart data={dailyData} />\n//                 </div>\n        \n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">성별 검색량</span>\n//                         <GenderChart data={genderData} />\n//                 </div>\n        \n//                 <div className=\"featuredItem\">\n//                     <span className=\"featuredTitle\">연령별 검색량</span>\n//                         <AgesChart data={agesData} />\n//                 </div>\n//         </div>\n//     );\n\n// };\n        \n\n// export default FeaturedInfo;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}