{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/Wellness/front/src/components/chart/Dailychart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport './dailychart.css';\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\n\n// Chart.js에 필요한 요소 등록\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst DailyChart = ({\n  data\n}) => {\n  _s();\n  // 전체 검색량 합계 계산\n  const totalSearchVolume = useMemo(() => {\n    return data.reduce((sum, item) => sum + item.ratio, 0);\n  }, [data]);\n\n  // 데이터 5일 단위로 묶기 및 비율 계산\n  const groupedData = useMemo(() => {\n    const groupSize = 5; // 5일 단위\n    const result = [];\n    for (let i = 0; i < data.length; i += groupSize) {\n      const group = data.slice(i, i + groupSize);\n      const groupLabel = `${group[0].date} ~ ${group[group.length - 1].date}`;\n      const groupValue = group.reduce((sum, item) => sum + item.ratio, 0);\n      const groupRatio = groupValue / totalSearchVolume * 100; // 비율 계산\n      result.push({\n        label: groupLabel,\n        value: groupRatio\n      });\n    }\n    console.log(\"일별 검색률: \", result);\n    return result;\n  }, [data, totalSearchVolume]);\n\n  // 차트에 사용할 데이터\n  const labels = groupedData.map(item => item.label);\n  const values = groupedData.map(item => item.value);\n  const chartData = {\n    labels: labels,\n    datasets: [{\n      label: \"일별 검색량\",\n      data: values,\n      backgroundColor: \"rgba(7, 7, 7, 1)\",\n      borderColor: \"rgba(7, 7, 7, 1)\",\n      borderWidth: 1,\n      hoverOffset: 4\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        enabled: true,\n        // 툴팁 활성화\n        callbacks: {\n          label: function (context) {\n            const value = context.raw;\n            return `비율: ${value.toFixed(2)}%`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true\n        },\n        grid: {\n          display: false\n        },\n        ticks: {\n          color: \"#333\"\n        }\n      },\n      y: {\n        title: {\n          display: true\n        },\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: \"rgba(200, 200, 200, 0.2)\"\n        },\n        ticks: {\n          color: \"#333\"\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"daliy-container\",\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyChart, \"wDy6f0ftIBEo1DN23+U1/D8GzTI=\");\n_c = DailyChart;\nexport default DailyChart;\nvar _c;\n$RefreshReg$(_c, \"DailyChart\");","map":{"version":3,"names":["React","useMemo","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DailyChart","data","_s","totalSearchVolume","reduce","sum","item","ratio","groupedData","groupSize","result","i","length","group","slice","groupLabel","date","groupValue","groupRatio","push","label","value","console","log","labels","map","values","chartData","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","plugins","legend","display","tooltip","enabled","callbacks","context","raw","toFixed","scales","x","title","grid","ticks","color","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/Wellness/front/src/components/chart/Dailychart.jsx"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport './dailychart.css'\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\n// Chart.js에 필요한 요소 등록\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst DailyChart = ({ data }) => {\n  // 전체 검색량 합계 계산\n  const totalSearchVolume = useMemo(() => {\n    return data.reduce((sum, item) => sum + item.ratio, 0);\n  }, [data]);\n\n  // 데이터 5일 단위로 묶기 및 비율 계산\n  const groupedData = useMemo(() => {\n    const groupSize = 5; // 5일 단위\n    const result = [];\n\n    for (let i = 0; i < data.length; i += groupSize) {\n      const group = data.slice(i, i + groupSize);\n      const groupLabel = `${group[0].date} ~ ${group[group.length - 1].date}`;\n      const groupValue = group.reduce((sum, item) => sum + item.ratio, 0);\n      const groupRatio = (groupValue / totalSearchVolume) * 100; // 비율 계산\n      result.push({ label: groupLabel, value: groupRatio });\n    }\n    console.log(\"일별 검색률: \", result);\n    return result;\n  }, [data, totalSearchVolume]);\n\n  // 차트에 사용할 데이터\n  const labels = groupedData.map((item) => item.label);\n  const values = groupedData.map((item) => item.value);\n\n  const chartData = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"일별 검색량\",\n        data: values,\n        backgroundColor: \"rgba(7, 7, 7, 1)\",\n        borderColor: \"rgba(7, 7, 7, 1)\",\n        borderWidth: 1,\n        hoverOffset: 4,\n      }\n    ]\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        enabled: true, // 툴팁 활성화\n        callbacks: {\n          label: function (context) {\n            const value = context.raw;\n            return `비율: ${value.toFixed(2)}%`;\n          }\n        }\n      }   \n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n        },\n        grid: {\n          display: false,\n        },\n        ticks: {\n          color: \"#333\",\n        },\n      },\n      y: {\n        title: {\n          display: true,\n        },\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: \"rgba(200, 200, 200, 0.2)\",\n        },\n        ticks: {\n          color: \"#333\",\n        }\n      }\n    }\n  };\n\n\n  return (\n    <div className=\"daliy-container\">\n        <Bar data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default DailyChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}