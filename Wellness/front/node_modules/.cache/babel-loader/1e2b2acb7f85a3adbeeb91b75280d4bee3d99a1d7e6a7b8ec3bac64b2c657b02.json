{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/Wellness/front/src/components/chart/Monthlychart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport { useLocation } from \"react-router-dom\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst MonthlyChart = ({\n  keyword\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  // const [loading, setLoading] = useState(true);\n  const location = useLocation();\n  useEffect(() => {\n    const fetchMonthlyData = async () => {\n      try {\n        const response = await axios.post(\"/api/trend\", {\n          params: {\n            keyword,\n            timeUnit: \"month\"\n          }\n        });\n\n        // 데이터 가공\n        const results = response.data.results[0];\n        const labels = results.data.map(item => item.period);\n        const values = results.data.map(item => item.ratio);\n\n        // 그라데이션 생성\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n        gradient.addColorStop(0, \"rgba(204, 234, 119, 0.8)\");\n        gradient.addColorStop(1, \"rgba(75, 192, 192, 0)\");\n        setChartData({\n          labels,\n          datasets: [{\n            label: `\"${keyword}\" 월별 검색량`,\n            data: values,\n            borderColor: gradient,\n            backgroundColor: \"rgba(204, 234, 119, 1)\",\n            borderWidth: 3,\n            fill: true,\n            pointRadius: 6,\n            pointHoverRadius: 6,\n            pointBackgroundColor: \"rgba(29, 29, 29, 1)\",\n            pointHoverBackgroundColor: \"#F5F5F5\",\n            tension: 0.4\n          }]\n        });\n      } catch (error) {\n        console.error(\"월별 데이터 요청 오류:\", error);\n      }\n    };\n    if (keyword !== \"wellness\") {\n      fetchMonthlyData();\n    }\n  }, [keyword]);\n\n  // 경로 변경 시 차트 데이터 초기화\n  useEffect(() => {\n    setChartData(null);\n    // setLoading(false);\n  }, [location.pathname]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chartTitle\",\n      children: \"by Monthly\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false,\n            label: {\n              boxWidth: 0\n            }\n          }\n        },\n        hover: {\n          mode: \"nearest\",\n          intersect: true\n        },\n        interaction: {\n          mode: \"index\",\n          intersect: false\n        },\n        scales: {\n          x: {\n            title: {\n              display: true\n            },\n            type: \"category\",\n            grid: {\n              display: true,\n              color: 'rgba(245, 245, 245, 0.2)',\n              lineWidth: 1\n            },\n            ticks: {\n              color: \"#F5F5F5\",\n              callback: function (value, index) {\n                const months = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n                const date = new Date(chartData.labels[index]);\n                return months[date.getMonth()];\n              }\n            }\n          },\n          y: {\n            title: {\n              display: true\n            },\n            grid: {\n              display: true,\n              color: 'rgba(245, 245, 245, 0.2)',\n              lineWidth: 1\n            },\n            ticks: {\n              color: \"#F5F5F5\",\n              stepSize: 25\n            },\n            beginAtZero: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-container\",\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(MonthlyChart, \"OBvyky0HgFyoduJ1PqeVNuO6cTk=\", false, function () {\n  return [useLocation];\n});\n_c = MonthlyChart;\nexport default MonthlyChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyChart\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","useLocation","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","MonthlyChart","keyword","_s","chartData","setChartData","location","fetchMonthlyData","response","post","params","timeUnit","results","data","labels","map","item","period","values","ratio","canvas","document","createElement","ctx","getContext","gradient","createLinearGradient","addColorStop","datasets","label","borderColor","backgroundColor","borderWidth","fill","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBackgroundColor","tension","error","console","pathname","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","plugins","legend","display","boxWidth","hover","mode","intersect","interaction","scales","x","title","type","grid","color","lineWidth","ticks","callback","value","index","months","date","Date","getMonth","y","stepSize","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/Wellness/front/src/components/chart/Monthlychart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst MonthlyChart = ({ keyword }) => {\n    const [chartData, setChartData] = useState(null);\n    // const [loading, setLoading] = useState(true);\n    const location = useLocation();\n\n    useEffect(() => {\n        const fetchMonthlyData = async () => {\n\n            try {\n                const response = await axios.post(\"/api/trend\", {\n                    params: { keyword, timeUnit: \"month\" },\n                });\n\n                // 데이터 가공\n                const results = response.data.results[0];\n                const labels = results.data.map((item) => item.period); \n                const values = results.data.map((item) => item.ratio);  \n\n                // 그라데이션 생성\n                const canvas = document.createElement(\"canvas\");\n                const ctx = canvas.getContext(\"2d\");\n                const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n                gradient.addColorStop(0, \"rgba(204, 234, 119, 0.8)\"); \n                gradient.addColorStop(1, \"rgba(75, 192, 192, 0)\"); \n\n                setChartData({\n                    labels,\n                    datasets: [\n                        {\n                            label: `\"${keyword}\" 월별 검색량`,\n                            data: values,\n                            borderColor: gradient,\n                            backgroundColor: \"rgba(204, 234, 119, 1)\",\n                            borderWidth: 3,\n                            fill: true, \n                            pointRadius: 6, \n                            pointHoverRadius: 6,\n                            pointBackgroundColor: \"rgba(29, 29, 29, 1)\",\n                            pointHoverBackgroundColor: \"#F5F5F5\",\n                            tension: 0.4\n                          }\n                      ]\n                  });\n\n                } catch (error) {\n                    console.error(\"월별 데이터 요청 오류:\", error);\n                } \n            };\n\n            if (keyword !== \"wellness\") {\n                fetchMonthlyData();\n            }\n    }, [keyword]);\n\n    // 경로 변경 시 차트 데이터 초기화\n    useEffect(() => {\n        setChartData(null);\n        // setLoading(false);\n    }, [location.pathname]); \n\n    return (\n        <div className=\"chart-container\">\n            <h3 className=\"chartTitle\">by Monthly</h3>\n            {chartData ? (\n                <Line\n                  data={chartData}\n                  options={{\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  plugins: {\n                      legend: { \n                          display: false, \n                          label: {\n                            boxWidth: 0\n                          }\n                      }\n                  },\n                  hover: {\n                      mode: \"nearest\", \n                      intersect: true,\n                  },\n                  interaction: {\n                    mode: \"index\", \n                    intersect: false,\n                  },\n                  scales: {\n                      x: {\n                          title: {\n                              display: true,\n                          },\n                          type: \"category\",\n                          grid: {\n                              display: true,\n                              color: 'rgba(245, 245, 245, 0.2)', \n                              lineWidth: 1\n                          },\n                          ticks: {\n                              color: \"#F5F5F5\", \n                              callback: function (value, index) {\n                                const months = [\n                                  \"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \n                                  \"Jul.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"\n                                ];\n                                const date = new Date(chartData.labels[index]);\n                                return months[date.getMonth()];\n                              }\n                          }\n                      },\n                      y: {\n                          title: {\n                              display: true,\n                          },\n                          grid: {\n                              display: true,\n                              color: 'rgba(245, 245, 245, 0.2)', \n                              lineWidth: 1\n                          },\n                          ticks: {\n                            color: \"#F5F5F5\",\n                            stepSize: 25\n                          },\n                          beginAtZero: true,\n                      }\n                    }\n                }}\n              />\n          ) : (\n            <p className=\"loading-container\">Loading chart...</p>\n          )}\n      </div>\n  );\n};\n\nexport default MonthlyChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}