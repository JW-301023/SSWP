{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/react/front/src/components/chart/Chart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./chart.css\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Chart = ({\n  keyword\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"데이터 요청 시작\", keyword);\n      try {\n        const response = await axios.get(`/api/trend`, {\n          params: {\n            keyword\n          }\n        });\n        console.log(\"서버 응답 데이터: \", response.data);\n\n        // 데이터 가공\n        const results = response.data.results[0];\n        const labels = results.data.map(item => item.period);\n        const values = results.data.map(item => item.ratio);\n        setChartData({\n          labels,\n          datasets: [{\n            label: `\"${keyword}\" 월별 키워드`,\n            data: values,\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            borderWidth: 2,\n            pointBackgroundColor: \"rgba(75, 192, 192, 1)\",\n            // 포인트 색상\n            pointHoverBackgroundColor: \"#ff6384\",\n            // 마우스 오버 시 포인트 색상\n            fill: true,\n            backgroundColor: 'pink'\n          }]\n        });\n      } catch (error) {\n        console.error(\"데이터 요청 오류: \", error);\n      }\n    };\n    if (keyword !== \"wellness\") {\n      fetchData();\n    }\n  }, [keyword]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chartTitle\",\n      children: \"\\uC6D4\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false,\n            position: \"top\",\n            labels: {\n              boxWidth: 0,\n              // 네모 박스 제거\n              color: \"#fff\"\n            }\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true\n            },\n            type: \"category\",\n            ticks: {\n              color: \"#fff\",\n              callback: function (value, index) {\n                const months = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n                const date = new Date(chartData.labels[index]);\n                return months[date.getMonth()];\n              }\n            }\n          },\n          y: {\n            title: {\n              display: true\n            },\n            ticks: {\n              color: \"#fff\"\n              // min: 0,\n              // max: 100\n            },\n            beginAtZero: true // y축을 0부터 시작\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n  ;\n};\n_s(Chart, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = Chart;\nexport default Chart;\n\n// import React from \"react\";\n// import './chart.css'\n// import { LineChart, Line, XAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n// export default function Chart({title, data, dataKey, grid}) {\n//     return (\n//         <div className=\"chart\">\n//             <h3 className=\"chartTitle\">{title}</h3>\n//             <ResponsiveContainer width=\"100%\" aspect={4 / 1} >\n//                 <LineChart data={data} >\n//                     <XAxis dataKey=\"name\" stroke=\"white\" />\n//                     <Line type=\"monotone\" dataKey={dataKey} />\n//                     <Tooltip />\n//                     { grid && <CartesianGrid stroke=\"white\" strokeDasharray=\"5 5\" /> }\n//                 </LineChart>\n//             </ResponsiveContainer>\n//         </div>\n//     )\n// }\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","keyword","_s","chartData","setChartData","fetchData","console","log","response","get","params","data","results","labels","map","item","period","values","ratio","datasets","label","borderColor","borderWidth","pointBackgroundColor","pointHoverBackgroundColor","fill","backgroundColor","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","plugins","legend","display","position","boxWidth","color","scales","x","title","type","ticks","callback","value","index","months","date","Date","getMonth","y","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/react/front/src/components/chart/Chart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./chart.css\"\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from \"chart.js\";\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n);\n\nconst Chart = ({ keyword }) => {\n    const [chartData, setChartData] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            console.log(\"데이터 요청 시작\", keyword);\n            try {\n                const response = await axios.get(`/api/trend`, {\n                    params: { keyword },\n                });\n\n                console.log(\"서버 응답 데이터: \", response.data);\n\n                // 데이터 가공\n                const results = response.data.results[0];\n                const labels = results.data.map((item) => item.period);\n                const values = results.data.map((item) => item.ratio);\n\n                setChartData({\n                    labels,\n                    datasets: [\n                        {\n                            label: `\"${keyword}\" 월별 키워드`,\n                            data: values,\n                            borderColor: \"rgba(75, 192, 192, 1)\",\n                            borderWidth: 2,\n                            pointBackgroundColor: \"rgba(75, 192, 192, 1)\", // 포인트 색상\n                            pointHoverBackgroundColor: \"#ff6384\", // 마우스 오버 시 포인트 색상\n                            fill: true,\n                            backgroundColor: 'pink'\n                        },\n                    ],\n                });\n\n            } catch (error) {\n                console.error(\"데이터 요청 오류: \", error);\n            }\n        };\n\n        if (keyword !== \"wellness\") {\n            fetchData();\n        }\n    }, [keyword]);\n\n    return (\n        <div className=\"chart-container\">\n            <h3 className=\"chartTitle\">월별 검색량</h3>\n            {chartData ? (\n                <Line \n                  data={chartData}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: { \n                            display: false, \n                            position: \"top\", \n                            labels: {\n                                boxWidth: 0, // 네모 박스 제거\n                                color: \"#fff\",\n                            }\n                        },\n                    },\n                    scales: {\n                        x: {\n                            title: {\n                                display: true,\n                            },\n                            type: \"category\",\n                            ticks: {\n                                color: \"#fff\", \n                                callback: function (value, index) {\n                                  const months = [\n                                    \"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May\", \"Jun.\", \n                                    \"Jul.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"\n                                  ];\n                                  const date = new Date(chartData.labels[index]);\n                                  return months[date.getMonth()];\n                                },\n                            },\n                        },\n                        y: {\n                            title: {\n                                display: true,\n                            },\n                            ticks: {\n                                color: \"#fff\"\n                                // min: 0,\n                                // max: 100\n                            },\n                            beginAtZero: true, // y축을 0부터 시작\n                        },\n                    },\n                  }}\n                />\n            ) : (\n                <p>Loading chart...</p>\n            )}\n        </div>\n    );\n;}\n\nexport default Chart;\n\n\n\n\n\n\n// import React from \"react\";\n// import './chart.css'\n// import { LineChart, Line, XAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n// export default function Chart({title, data, dataKey, grid}) {\n//     return (\n//         <div className=\"chart\">\n//             <h3 className=\"chartTitle\">{title}</h3>\n//             <ResponsiveContainer width=\"100%\" aspect={4 / 1} >\n//                 <LineChart data={data} >\n//                     <XAxis dataKey=\"name\" stroke=\"white\" />\n//                     <Line type=\"monotone\" dataKey={dataKey} />\n//                     <Tooltip />\n//                     { grid && <CartesianGrid stroke=\"white\" strokeDasharray=\"5 5\" /> }\n//                 </LineChart>\n//             </ResponsiveContainer>\n//         </div>\n//     )\n// }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElBT,OAAO,CAACU,QAAQ,CACZT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AAED,MAAMR,KAAK,GAAGA,CAAC;EAAEY;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1BC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEN,OAAO,CAAC;MACjC,IAAI;QACA,MAAMO,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,YAAY,EAAE;UAC3CC,MAAM,EAAE;YAAET;UAAQ;QACtB,CAAC,CAAC;QAEFK,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,QAAQ,CAACG,IAAI,CAAC;;QAEzC;QACA,MAAMC,OAAO,GAAGJ,QAAQ,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;QACxC,MAAMC,MAAM,GAAGD,OAAO,CAACD,IAAI,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,MAAM,CAAC;QACtD,MAAMC,MAAM,GAAGL,OAAO,CAACD,IAAI,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACG,KAAK,CAAC;QAErDd,YAAY,CAAC;UACTS,MAAM;UACNM,QAAQ,EAAE,CACN;YACIC,KAAK,EAAE,IAAInB,OAAO,UAAU;YAC5BU,IAAI,EAAEM,MAAM;YACZI,WAAW,EAAE,uBAAuB;YACpCC,WAAW,EAAE,CAAC;YACdC,oBAAoB,EAAE,uBAAuB;YAAE;YAC/CC,yBAAyB,EAAE,SAAS;YAAE;YACtCC,IAAI,EAAE,IAAI;YACVC,eAAe,EAAE;UACrB,CAAC;QAET,CAAC,CAAC;MAEN,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZrB,OAAO,CAACqB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACvC;IACJ,CAAC;IAED,IAAI1B,OAAO,KAAK,UAAU,EAAE;MACxBI,SAAS,CAAC,CAAC;IACf;EACJ,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;EAEb,oBACIF,OAAA;IAAK6B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5B9B,OAAA;MAAI6B,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrC9B,SAAS,gBACNJ,OAAA,CAACX,IAAI;MACHuB,IAAI,EAAER,SAAU;MAChB+B,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,KAAK;QAC1BC,OAAO,EAAE;UACLC,MAAM,EAAE;YACJC,OAAO,EAAE,KAAK;YACdC,QAAQ,EAAE,KAAK;YACf3B,MAAM,EAAE;cACJ4B,QAAQ,EAAE,CAAC;cAAE;cACbC,KAAK,EAAE;YACX;UACJ;QACJ,CAAC;QACDC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCC,KAAK,EAAE;cACHN,OAAO,EAAE;YACb,CAAC;YACDO,IAAI,EAAE,UAAU;YAChBC,KAAK,EAAE;cACHL,KAAK,EAAE,MAAM;cACbM,QAAQ,EAAE,SAAAA,CAAUC,KAAK,EAAEC,KAAK,EAAE;gBAChC,MAAMC,MAAM,GAAG,CACb,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAC7C,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAChD;gBACD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAClD,SAAS,CAACU,MAAM,CAACqC,KAAK,CAAC,CAAC;gBAC9C,OAAOC,MAAM,CAACC,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC;cAChC;YACJ;UACJ,CAAC;UACDC,CAAC,EAAE;YACCV,KAAK,EAAE;cACHN,OAAO,EAAE;YACb,CAAC;YACDQ,KAAK,EAAE;cACHL,KAAK,EAAE;cACP;cACA;YACJ,CAAC;YACDc,WAAW,EAAE,IAAI,CAAE;UACvB;QACJ;MACF;IAAE;MAAA1B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAEFlC,OAAA;MAAA8B,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;EAEd;AAAC,CAAC;AAAA/B,EAAA,CApGIb,KAAK;AAAAoE,EAAA,GAALpE,KAAK;AAsGX,eAAeA,KAAK;;AAOpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}