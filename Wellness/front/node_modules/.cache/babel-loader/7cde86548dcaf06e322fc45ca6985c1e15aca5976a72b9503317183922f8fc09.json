{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/Wellness/front/src/components/featuredInfo/FeaturedInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './featuredInfo.css';\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\nimport GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeaturedInfo = ({\n  keyword\n}) => {\n  _s();\n  const [dailyData, setDailyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [genderData, setGenderData] = useState(null);\n  const [agesData, setAgesData] = useState([]);\n  const [error, setError] = useState(null);\n\n  // 현재 날짜 기준 요청 데이터 생성\n  const calculateDateRange = timeUnit => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const day = String(now.getDate()).padStart(2, \"0\");\n    if (timeUnit === \"month\") {\n      // 월별 데이터: 해당 연도의 1월 1일부터 현재 날짜까지\n      const startDate = `${year}-01-01`; // 1월 1일\n      const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n      return {\n        startDate,\n        endDate\n      };\n    } else if (timeUnit === \"date\") {\n      // 일별 데이터: 해당 월의 1일부터 현재 날짜까지\n      const startDate = `${year}-${month}-01`; // 이번 달의 1일\n      const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n      return {\n        startDate,\n        endDate\n      };\n    }\n\n    // 기본값: 전체 연도 기준\n    const startDate = `${year}-01-01`;\n    const endDate = `${year}-${month}-${day}`;\n    return {\n      startDate,\n      endDate\n    };\n  };\n  const fetchTrendData = async (timeUnit, type, value) => {\n    if (!keyword || keyword.trim() === \"\") {\n      console.error(\"유효하지 않은 검색어:\", keyword);\n      setError(\"검색어를 입력하세요.\");\n      return null;\n    }\n    const {\n      startDate,\n      endDate\n    } = calculateDateRange(timeUnit);\n    const requestData = {\n      startDate,\n      endDate,\n      timeUnit,\n      keywordGroups: [{\n        groupName: \"trend\",\n        keywords: [keyword]\n      }],\n      ...(type === \"gender\" ? {\n        gender: value\n      } : {}),\n      ...(type === \"age\" ? {\n        ages: [value]\n      } : {})\n    };\n    try {\n      var _response$data;\n      const response = await axios.post(\"/api/trend\", requestData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      return ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.results) || []; // API 응답 결과 반환\n    } catch (err) {\n      console.error(\"데이터 요청 실패:\", err);\n      return [];\n    }\n  };\n\n  // 데이터 요청 및 처리\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 일별 데이터 요청\n        const dailyResponse = await fetchTrendData(\"date\");\n        if (dailyResponse) {\n          var _dailyResponse$;\n          const transformedData = (_dailyResponse$ = dailyResponse[0]) === null || _dailyResponse$ === void 0 ? void 0 : _dailyResponse$.data.map(item => ({\n            date: item.period,\n            ratio: item.ratio\n          }));\n          setDailyData(transformedData);\n        }\n\n        // 월별 데이터 요청\n        const monthlyResponse = await fetchTrendData(\"month\");\n        if (monthlyResponse) {\n          var _monthlyResponse$;\n          const transformedMonthlyData = (_monthlyResponse$ = monthlyResponse[0]) === null || _monthlyResponse$ === void 0 ? void 0 : _monthlyResponse$.data.map(item => ({\n            month: item.period,\n            ratio: item.ratio\n          }));\n          setMonthlyData(transformedMonthlyData);\n        }\n\n        // 성별 데이터 요청\n        const maleResponse = await fetchTrendData(\"date\", \"gender\", \"m\");\n        const femaleResponse = await fetchTrendData(\"date\", \"gender\", \"f\");\n        if (maleResponse && femaleResponse) {\n          var _maleResponse$, _femaleResponse$;\n          const maleData = (_maleResponse$ = maleResponse[0]) === null || _maleResponse$ === void 0 ? void 0 : _maleResponse$.data.map(item => ({\n            date: item.period,\n            ratio: item.ratio\n          }));\n          const femaleData = (_femaleResponse$ = femaleResponse[0]) === null || _femaleResponse$ === void 0 ? void 0 : _femaleResponse$.data.map(item => ({\n            date: item.period,\n            ratio: item.ratio\n          }));\n          setGenderData({\n            male: maleData,\n            female: femaleData\n          });\n        }\n\n        // 연령별 데이터 요청\n        const ageResponse = await fetchTrendData(\"date\", \"age\");\n        // const ageGroups = {\n        //     \"10대\": [\"1\", \"2\"],\n        //     \"20대\": [\"3\", \"4\"],\n        //     \"30대\": [\"5\", \"6\"],\n        //     \"40대\": [\"7\", \"8\"],\n        //     \"50대\": [\"9\", \"10\"],\n        //     \"60대 이상\": [\"11\"],\n        // };\n\n        // let totalAgeSum = 0;\n        // const ageGroupSums = {};\n\n        // for (const [group, codes] of Object.entries(ageGroups)) {\n        //     let groupSum = 0;\n\n        //     for (const code of codes) {\n        //         // API 호출 결과 가져오는 부분\n        //         const ageResponse = await fetchTrendData(\"date\", \"age\", code);\n\n        //         // console.log(`연령대 코드 ${code} 응답 데이터:`, ageResponse[0]?.data || []);\n\n        //         const data = ageResponse[0]?.data || [];\n        //         groupSum += data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n        //     }\n\n        //     // console.log(`연령대: ${group}, 합계: ${groupSum}`);      // 확인\n        //     ageGroupSums[group] = groupSum;\n        //     totalAgeSum += groupSum;\n        // }\n        // // console.log(\"전체 연령대 합계:\", totalAgeSum); // 디버깅: 전체 합계\n\n        // const agesData = {};\n        // for (const [group, sum] of Object.entries(ageGroupSums)) {\n        //     agesData[group] = ((sum / totalAgeSum) * 100).toFixed(2);\n        //     // console.log(`연령대: ${group}, 비율: ${agesData[group]}%`); // 디버깅: 각 연령대 비율\n        // }\n        // setAgesData(agesData);\n\n        // // console.log(\"성별 비율:\", genderData);\n        // // console.log(\"연령대 비율:\", agesData);\n      } catch (err) {\n        console.error(\"데이터 요청 실패: \", err);\n        setError(\"데이터 요청에 실패했습니다.\");\n      }\n    };\n    fetchData();\n  }, [keyword]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"featured\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"barChart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chartTitle\",\n          children: \"\\uC77C\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DailyChart, {\n          data: dailyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pieChart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chartTitle\",\n          children: \"\\uC131\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GenderChart, {\n          data: genderData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pieChart-container\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chartTitle\",\n          children: \"\\uC5F0\\uB839\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lineContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"lineTitle\",\n        children: \"\\uC6D4\\uBCC4 \\uAC80\\uC0C9\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MonthlyChart, {\n        data: monthlyData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n_s(FeaturedInfo, \"mK87U7ViCUORbNKNAsw4piuK1Yc=\");\n_c = FeaturedInfo;\nexport default FeaturedInfo;\nvar _c;\n$RefreshReg$(_c, \"FeaturedInfo\");","map":{"version":3,"names":["React","useEffect","useState","axios","DailyChart","MonthlyChart","GenderChart","jsxDEV","_jsxDEV","FeaturedInfo","keyword","_s","dailyData","setDailyData","monthlyData","setMonthlyData","genderData","setGenderData","agesData","setAgesData","error","setError","calculateDateRange","timeUnit","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","startDate","endDate","fetchTrendData","type","value","trim","console","requestData","keywordGroups","groupName","keywords","gender","ages","_response$data","response","post","headers","data","results","err","fetchData","dailyResponse","_dailyResponse$","transformedData","map","item","date","period","ratio","monthlyResponse","_monthlyResponse$","transformedMonthlyData","maleResponse","femaleResponse","_maleResponse$","_femaleResponse$","maleData","femaleData","male","female","ageResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/Wellness/front/src/components/featuredInfo/FeaturedInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './featuredInfo.css'\n\nimport DailyChart from \"../chart/Dailychart\";\nimport MonthlyChart from \"../chart/Monthlychart\";\nimport GenderChart from \"../chart/Genderchart\";\n// import AgesChart from \"../chart/Ageschart\";\n\n\n const FeaturedInfo = ({ keyword }) => {\n    const [dailyData, setDailyData] = useState([]);\n    const [monthlyData, setMonthlyData] = useState([]);\n    const [genderData, setGenderData] = useState(null);\n    const [agesData, setAgesData] = useState([]);\n    const [error, setError] = useState(null);\n\n    // 현재 날짜 기준 요청 데이터 생성\n    const calculateDateRange = (timeUnit) => {\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, \"0\");\n        const day = String(now.getDate()).padStart(2, \"0\");\n\n        if (timeUnit === \"month\") {\n            // 월별 데이터: 해당 연도의 1월 1일부터 현재 날짜까지\n            const startDate = `${year}-01-01`; // 1월 1일\n            const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n            return { startDate, endDate };\n        } else if (timeUnit === \"date\") {\n            // 일별 데이터: 해당 월의 1일부터 현재 날짜까지\n            const startDate = `${year}-${month}-01`; // 이번 달의 1일\n            const endDate = `${year}-${month}-${day}`; // 오늘 날짜\n            return { startDate, endDate };\n        }\n\n        // 기본값: 전체 연도 기준\n        const startDate = `${year}-01-01`;\n        const endDate = `${year}-${month}-${day}`;\n        return { startDate, endDate };\n\n    };\n        \n    const fetchTrendData = async (timeUnit, type, value) => {\n        if (!keyword || keyword.trim() === \"\") {\n            console.error(\"유효하지 않은 검색어:\", keyword);\n            setError(\"검색어를 입력하세요.\");\n            return null; \n        }\n\n        const { startDate, endDate } = calculateDateRange(timeUnit);\n        const requestData = {\n            startDate,\n            endDate,\n            timeUnit,\n            keywordGroups: [\n                { \n                    groupName: \"trend\", \n                    keywords: [keyword]\n                }\n            ],\n            ...(type === \"gender\" ? { gender: value } : {}),\n            ...(type === \"age\" ? { ages: [value] } : {}),\n        };\n        \n\n        try {\n            const response = await axios.post(\"/api/trend\", requestData, {\n                headers: { \"Content-Type\": \"application/json\" }\n            });\n\n            return response.data?.results || []; // API 응답 결과 반환\n\n        } catch (err) {\n            console.error(\"데이터 요청 실패:\", err);\n            return [];\n        }\n    };\n  \n  \n    // 데이터 요청 및 처리\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // 일별 데이터 요청\n                const dailyResponse = await fetchTrendData(\"date\");\n                if (dailyResponse) {\n                    const transformedData = dailyResponse[0]?.data.map((item) => ({\n                        date: item.period,\n                        ratio: item.ratio,\n                    }));\n                    setDailyData(transformedData);\n                } \n\n                // 월별 데이터 요청\n                const monthlyResponse = await fetchTrendData(\"month\");\n                if (monthlyResponse) {\n                    const transformedMonthlyData = monthlyResponse[0]?.data.map((item) => ({\n                        month: item.period, \n                        ratio: item.ratio, \n                      }));\n                      setMonthlyData(transformedMonthlyData);\n                }\n\n                // 성별 데이터 요청\n                const maleResponse = await fetchTrendData(\"date\", \"gender\", \"m\");\n                const femaleResponse = await fetchTrendData(\"date\", \"gender\", \"f\");\n                if (maleResponse && femaleResponse) {\n                    const maleData = maleResponse[0]?.data.map((item) => ({\n                        date: item.period,\n                        ratio: item.ratio,\n                    }));\n                    const femaleData = femaleResponse[0]?.data.map((item) => ({\n                        date: item.period,\n                        ratio: item.ratio,\n                    }));\n                    setGenderData({\n                        male: maleData,\n                        female: femaleData,\n                    });\n                }\n\n\n                // 연령별 데이터 요청\n                const ageResponse = await fetchTrendData(\"date\", \"age\")\n                // const ageGroups = {\n                //     \"10대\": [\"1\", \"2\"],\n                //     \"20대\": [\"3\", \"4\"],\n                //     \"30대\": [\"5\", \"6\"],\n                //     \"40대\": [\"7\", \"8\"],\n                //     \"50대\": [\"9\", \"10\"],\n                //     \"60대 이상\": [\"11\"],\n                // };\n\n                // let totalAgeSum = 0;\n                // const ageGroupSums = {};\n\n                // for (const [group, codes] of Object.entries(ageGroups)) {\n                //     let groupSum = 0;\n\n                //     for (const code of codes) {\n                //         // API 호출 결과 가져오는 부분\n                //         const ageResponse = await fetchTrendData(\"date\", \"age\", code);\n\n                //         // console.log(`연령대 코드 ${code} 응답 데이터:`, ageResponse[0]?.data || []);\n                        \n                //         const data = ageResponse[0]?.data || [];\n                //         groupSum += data.reduce((sum, curr) => sum + parseFloat(curr.ratio || 0), 0);\n                //     }\n\n                //     // console.log(`연령대: ${group}, 합계: ${groupSum}`);      // 확인\n                //     ageGroupSums[group] = groupSum;\n                //     totalAgeSum += groupSum;\n                // }\n                // // console.log(\"전체 연령대 합계:\", totalAgeSum); // 디버깅: 전체 합계\n\n\n                // const agesData = {};\n                // for (const [group, sum] of Object.entries(ageGroupSums)) {\n                //     agesData[group] = ((sum / totalAgeSum) * 100).toFixed(2);\n                //     // console.log(`연령대: ${group}, 비율: ${agesData[group]}%`); // 디버깅: 각 연령대 비율\n                // }\n                // setAgesData(agesData);\n\n                // // console.log(\"성별 비율:\", genderData);\n                // // console.log(\"연령대 비율:\", agesData);\n\n            } catch (err) {\n                console.error(\"데이터 요청 실패: \", err);\n                setError(\"데이터 요청에 실패했습니다.\");\n            }\n        };\n      \n        fetchData();\n    }, [keyword]);\n\n    if (error) {\n        return <p>{error}</p>;\n    }\n    \n    return (\n        <div>\n            <div className=\"featured\">\n                <div className=\"barChart-container\">\n                    <span className=\"chartTitle\">일별 검색량</span>\n                        <DailyChart data={dailyData} />\n                </div>\n        \n                <div className=\"pieChart-container\">\n                    <span className=\"chartTitle\">성별 검색량</span>\n                        <GenderChart data={genderData} />\n                </div>\n        \n                <div className=\"pieChart-container\">\n                    <span className=\"chartTitle\">연령별 검색량</span>\n                        {/* <AgesChart data={agesData} /> */}\n                </div>\n            </div>\n\n            <div className=\"lineContainer\">\n                <span className=\"lineTitle\">월별 검색량</span>\n                    <MonthlyChart data={monthlyData}/>\n            </div>\n        </div>\n    );\n\n};\n        \n\nexport default FeaturedInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}