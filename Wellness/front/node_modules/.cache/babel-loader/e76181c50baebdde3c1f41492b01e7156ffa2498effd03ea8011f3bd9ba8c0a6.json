{"ast":null,"code":"var _jsxFileName = \"/Users/Seul/Desktop/Wellness/front/src/components/chart/Dailychart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport './dailychart.css';\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\n\n// Chart.js에 필요한 요소 등록\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst DailyChart = ({\n  data\n}) => {\n  _s();\n  // 데이터 5일 단위로 묶고 평균 비율 계산\n  const groupedData = useMemo(() => {\n    const groupSize = 5; // 5일 단위\n    const result = [];\n    for (let i = 0; i < data.length; i += groupSize) {\n      const group = data.slice(i, i + groupSize); // 5일 단위로 데이터 묶기\n      const groupLabel = `${i + 1}-${Math.min(i + groupSize, data.length)}`; // 1-5, 6-10 등 범위 라벨 생성\n      const groupAverageRatio = group.reduce((sum, item) => sum + item.ratio, 0) / group.length; // 평균 비율 계산\n      result.push({\n        label: groupLabel,\n        value: groupAverageRatio\n      });\n    }\n    console.log(\"5일 단위 평균 비율 데이터:\", result); // 디버깅용 출력\n    return result;\n  }, [data]);\n\n  // 차트에 사용할 데이터\n  const labels = groupedData.map(item => item.label);\n  const values = groupedData.map(item => item.value);\n  const chartData = {\n    labels: labels,\n    datasets: [{\n      label: \"일별 검색량\",\n      data: values,\n      backgroundColor: \"rgba(7, 7, 7, 1)\",\n      borderRadius: 8,\n      borderWidth: 1,\n      hoverOffset: 4\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        enabled: true,\n        // 툴팁 활성화\n        callbacks: {\n          label: function (context) {\n            const value = context.raw;\n            return `평균 비율: ${value.toFixed(2)}%`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: false,\n          font\n        },\n        grid: {\n          display: false\n        },\n        ticks: {\n          color: \"#333\"\n        }\n      },\n      y: {\n        title: {\n          display: true\n        },\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: \"rgba(200, 200, 200, 0.2)\"\n        },\n        ticks: {\n          color: \"#333\"\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"daliy-container\",\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyChart, \"zG1XW1L/H2qoftd8OFxQVEiFl3I=\");\n_c = DailyChart;\nexport default DailyChart;\nvar _c;\n$RefreshReg$(_c, \"DailyChart\");","map":{"version":3,"names":["React","useMemo","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","DailyChart","data","_s","groupedData","groupSize","result","i","length","group","slice","groupLabel","Math","min","groupAverageRatio","reduce","sum","item","ratio","push","label","value","console","log","labels","map","values","chartData","datasets","backgroundColor","borderRadius","borderWidth","hoverOffset","options","responsive","plugins","legend","display","tooltip","enabled","callbacks","context","raw","toFixed","scales","x","title","font","grid","ticks","color","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Seul/Desktop/Wellness/front/src/components/chart/Dailychart.jsx"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport './dailychart.css'\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\n// Chart.js에 필요한 요소 등록\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst DailyChart = ({ data }) => {\n  // 데이터 5일 단위로 묶고 평균 비율 계산\n  const groupedData = useMemo(() => {\n    const groupSize = 5; // 5일 단위\n    const result = [];\n\n    for (let i = 0; i < data.length; i += groupSize) {\n      const group = data.slice(i, i + groupSize); // 5일 단위로 데이터 묶기\n      const groupLabel = `${i + 1}-${Math.min(i + groupSize, data.length)}`; // 1-5, 6-10 등 범위 라벨 생성\n      const groupAverageRatio = group.reduce((sum, item) => sum + item.ratio, 0) / group.length; // 평균 비율 계산\n      result.push({ label: groupLabel, value: groupAverageRatio });\n    }\n\n    console.log(\"5일 단위 평균 비율 데이터:\", result); // 디버깅용 출력\n    return result;\n  }, [data]);\n\n  // 차트에 사용할 데이터\n  const labels = groupedData.map((item) => item.label);\n  const values = groupedData.map((item) => item.value);\n\n  const chartData = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"일별 검색량\",\n        data: values,\n        backgroundColor: \"rgba(7, 7, 7, 1)\",\n        borderRadius: 8, \n        borderWidth: 1,\n        hoverOffset: 4,\n      }\n    ]\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        enabled: true, // 툴팁 활성화\n        callbacks: {\n          label: function (context) {\n            const value = context.raw;\n            return `평균 비율: ${value.toFixed(2)}%`;\n          }\n        }\n      }   \n    },\n    scales: {\n      x: {\n        title: {\n          display: false,\n          font\n        },\n        grid: {\n          display: false,\n        },\n        ticks: {\n          color: \"#333\",\n        },\n      },\n      y: {\n        title: {\n          display: true,\n        },\n        beginAtZero: true,\n        grid: {\n          display: true,\n          color: \"rgba(200, 200, 200, 0.2)\",\n        },\n        ticks: {\n          color: \"#333\",\n        }\n      }\n    }\n  };\n\n\n  return (\n    <div className=\"daliy-container\">\n        <Bar data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default DailyChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}